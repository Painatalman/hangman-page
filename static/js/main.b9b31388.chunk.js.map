{"version":3,"sources":["components/HangmanPage/page-head.png","components/InvisibleButNavigable.js","components/HangmanPage/HangmanPage.js","components/HangmanPage/index.js","features/language/options.js","features/language/languageSlice.js","features/language/LanguageSelector.js","features/game/options.js","features/game/gameSlice.js","features/game/utils/getLowerNoAccentWord.js","features/game/utils/getWordWithSpaces.js","features/game/utils/getWrongLetters.js","features/game/components/GameLetterKeyboardButton.js","features/game/components/GameLetterKeyboard.js","features/game/components/AlreadyPlayedLetterMessage.js","features/game/components/IdleMessage.js","features/game/components/LoadingMessage.js","features/game/components/SolutionMessage.js","features/game/components/LostMessage.js","features/game/components/PlayLetterMessage.js","features/game/components/RightLetterMessage.js","features/game/components/WonMessage.js","features/game/components/WrongLetterMessage.js","features/game/components/GameMessage.js","features/game/components/GameTitle.js","features/game/components/GameScreen.js","features/game/Game.js","features/game/utils/isLetter.js","App.js","features/game/utils/hasLost.js","features/game/utils/hasWon.js","services/WordServiceEN.js","services/WordService.js","services/WordServicePT.js","app/sagas.js","app/store.js","i18nConfig.js","serviceWorker.js","index.js"],"names":["module","exports","Component","styled","Doll","figure","DollCaption","InvisibleButNavigable","figcaption","Head","img","nErrors","Torso","div","Limb","LeftArm","RightArm","LeftLeg","RightLeg","HangmanPage","chancesLeft","useMemo","src","headSrc","alt","Trans","i18nKey","LANGUAGES","en","pt","initialState","language","languageSlice","createSlice","name","reducers","setLanguage","state","action","payload","actions","selectLanguage","Select","select","dispatch","useDispatch","currentLang","useSelector","t","useTranslation","defaultValue","onChange","target","value","Object","keys","map","langCode","key","GAME_STATUS","playedLetters","solution","error","lastLetterPlayed","hasPlayedNewLetter","status","gameSlice","start","startAfterFetch","setGameError","playLetter","letter","includes","Set","sort","join","win","lose","setMessage","selectPlayedLetters","selectSolution","selectStatus","selectLastPlayedLetter","selectHasPlayedNewLetter","word","toLowerCase","replace","reduce","acc","char","noAccentChar","getLowerNoAccentWord","match","solutionWithoutAccents","errors","Wrapper","button","AlreadyPlayedWrapper","GameLetterKeyboardButton","Letter","type","onClick","Ol","ol","letters","split","GameLetterKeyboard","AlreadyPlayedLetterMessage","toUpperCase","LoadingMessage","SolutionMessage","LostMessage","Message","p","RightLetterMessage","WonMessage","WrongLetterMessage","IDLE","LOADING","LOST","WON","GameMessageWrapper","GameMessage","lastPlayedLetter","gameStatus","renderPlayingLetterStatus","PlayingMessage","IdleMessage","PlayLetterMessage","role","Title","h1","MainTitle","i","Subtitle","lang","SolutionWrapper","GameControl","section","Reset","GameScreenWrapper","article","GameControlTitle","h2","GameScreen","wrongLetters","getWrongLetters","wordWithSpaces","getWordWithSpaces","GameTitle","length","LanguageSelector","useEffect","handleKeyDown","ctrlKey","metaKey","str","letterCandidate","document","addEventListener","removeEventListener","App","Game","WordService","axios","get","data","Error","message","langServices","WordServiceEN","getServiceFromLang","getWord","fetchWord","startAfterSetLanguage","setLanguageOnRehydrate","checkGameEnd","gameSaga","wordService","call","put","i18n","changeLanguage","hasWon","hasLost","all","takeEvery","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","game","gameReducer","languageReducer","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","run","appSaga","persistor","persistStore","use","initReactI18next","init","resources","translation","alreadyPlayedLetterMessage","nrErrorsFigCaption","revealSolution","rightLetterMessage","wrongLetterMessage","lng","keySeparator","interpolation","escapeValue","Boolean","window","location","hostname","i18nConfig","ReactDOM","render","StrictMode","loading","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9b31388.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/page-head.1cc90bfe.png\";","import styled from 'styled-components';\n\nexport default Component => styled(Component)`\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(50%);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n`;\n","import React, { useMemo } from 'react';\nimport { Trans } from 'react-i18next';\n\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nimport InvisibleButNavigable from '../InvisibleButNavigable';\nimport headSrc from './page-head.png';\n\nconst bodyColor = 'black';\nconst opacityTransition = 'opacity 250ms ease-in-out';\n\nconst Doll = styled.figure`\n  width: 120px;\n  padding-bottom: 35px;\n  position: relative;\n  margin: auto;\n`;\n\nconst DollCaption = InvisibleButNavigable(styled.figcaption``);\n\nconst Head = styled.img`\n  width: 50%;\n  display: block;\n  margin: auto;\n  opacity: ${({ nErrors }) => (nErrors > 0 ? '1' : '0')};\n  transition: ${opacityTransition};\n`;\n\nconst Torso = styled.div`\n  width: 5px;\n  border-radius: 5px;\n  margin: 5px auto;\n  height: 90px;\n  background: ${bodyColor};\n  opacity: ${({ nErrors }) => (nErrors > 1 ? '1' : '0')};\n  transition: ${opacityTransition};\n`;\n\nconst Limb = styled.div`\n  width: 5px;\n  border-radius: 5px;\n  height: 30px;\n  background: ${bodyColor};\n  position: absolute;\n  transition: ${opacityTransition};\n`;\n\nconst LeftArm = styled(Limb)`\n  transform: rotate(30deg);\n  top: 85px;\n  left: 35px;\n  opacity: ${({ nErrors }) => (nErrors > 2 ? '1' : '0')};\n`;\n\nconst RightArm = styled(Limb)`\n  transform: rotate(-30deg);\n  top: 85px;\n  right: 35px;\n  opacity: ${({ nErrors }) => (nErrors > 3 ? '1' : '0')};\n`;\n\nconst LeftLeg = styled(Limb)`\n  transform: rotate(20deg);\n  top: 155px;\n  left: 45px;\n  opacity: ${({ nErrors }) => (nErrors > 4 ? '1' : '0')};\n`;\n\nconst RightLeg = styled(Limb)`\n  transform: rotate(-20deg);\n  top: 155px;\n  right: 45px;\n  opacity: ${({ nErrors }) => (nErrors > 5 ? '1' : '0')};\n`;\n\nfunction HangmanPage({ nErrors = 0 }) {\n  const chancesLeft = useMemo(() => 6 - nErrors, [nErrors]);\n\n  return (\n    <Doll>\n      <Head nErrors={nErrors} src={headSrc} alt=\"\" />\n      <Torso nErrors={nErrors} />\n      <LeftArm nErrors={nErrors} />\n      <RightArm nErrors={nErrors} />\n      <LeftLeg nErrors={nErrors} />\n      <RightLeg nErrors={nErrors} />\n      <DollCaption>\n        <Trans i18nKey=\"nrErrorsFigCaption\" chancesLeft={chancesLeft}>\n          Chances left: {{ chancesLeft }}\n        </Trans>\n      </DollCaption>\n    </Doll>\n  );\n}\n\nHangmanPage.propTypes = {\n  nErrors: PropTypes.number.isRequired,\n};\n\nexport default HangmanPage;\n","import HangmanPage from './HangmanPage';\n\nexport default HangmanPage;\n","export const LANGUAGES = {\n  en: 'english',\n  pt: 'português',\n};\n\nexport const DEFAULT_LANGUAGE = 'en';\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { DEFAULT_LANGUAGE } from './options';\n\nconst initialState = {\n  language: DEFAULT_LANGUAGE,\n};\n\nexport const languageSlice = createSlice({\n  name: 'language',\n  initialState,\n  reducers: {\n    setLanguage: (state, action) => {\n      state.language = action.payload;\n    },\n  },\n});\n\nexport const { setLanguage } = languageSlice.actions;\n\nexport const selectLanguage = state => {\n  return state[languageSlice.name].language;\n};\n\nexport default languageSlice.reducer;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport styled from 'styled-components';\n\nimport { selectLanguage, setLanguage } from './languageSlice';\nimport { LANGUAGES } from './options';\n\nconst Select = styled.select`\n  -webkit-appearance: none;\n`;\n\nexport default function () {\n  const dispatch = useDispatch();\n  const currentLang = useSelector(selectLanguage);\n  const { t } = useTranslation();\n\n  return (\n    // eslint-disable-next-line jsx-a11y/label-has-associated-control\n    <label>\n      {t('Change language:')}\n      <Select\n        defaultValue={currentLang}\n        onChange={({ target }) => dispatch(setLanguage(target.value))}\n      >\n        {Object.keys(LANGUAGES).map(langCode => (\n          <option key={langCode} value={langCode}>\n            {LANGUAGES[langCode]}\n          </option>\n        ))}\n      </Select>\n    </label>\n  );\n}\n","export const GAME_STATUS = {\n  // can start game, not ready yet. Cannot play letters\n  IDLE: 'idle',\n  // can play letters\n  PLAYING: 'playing',\n  // fetching content, playing animation. No interaction\n  LOADING: 'loading',\n  // like IDLE, but counts as victory\n  WON: 'won',\n  // like IDLE, but counts as loss\n  LOST: 'lost',\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { GAME_STATUS } from './options';\n\nconst initialState = {\n  playedLetters: '',\n  solution: '',\n  error: null,\n  lastLetterPlayed: null,\n  hasPlayedNewLetter: false,\n  status: GAME_STATUS.IDLE,\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    start: state => {\n      state.playedLetters = '';\n      state.solution = '';\n      state.error = null;\n      state.status = GAME_STATUS.LOADING;\n      state.lastLetterPlayed = initialState.lastLetterPlayed;\n      state.hasPlayedNewLetter = false;\n    },\n    startAfterFetch: (state, action) => {\n      state.solution = action.payload;\n      state.status = GAME_STATUS.PLAYING;\n    },\n    setGameError: (state, action) => {\n      state.error = action.payload;\n      state.status = GAME_STATUS.IDLE;\n    },\n    playLetter: (state, { payload: letter }) => {\n      const { playedLetters } = state;\n\n      state.lastLetterPlayed = letter;\n      state.hasPlayedNewLetter = !playedLetters.includes(letter);\n      state.playedLetters = [...new Set(`${playedLetters}${letter}`)]\n        .sort()\n        .join('');\n    },\n    win: state => {\n      state.status = GAME_STATUS.WON;\n    },\n    lose: state => {\n      state.status = GAME_STATUS.LOST;\n    },\n  },\n});\n\nexport const {\n  start,\n  startAfterFetch,\n  playLetter,\n  setGameError,\n  setMessage,\n  win,\n  lose,\n} = gameSlice.actions;\n\n// `useSelector((state) => state.counter.value)`\nexport const selectPlayedLetters = state => {\n  return state[gameSlice.name].playedLetters;\n};\nexport const selectSolution = state => {\n  return state[gameSlice.name].solution;\n};\nexport const selectStatus = state => {\n  return state[gameSlice.name].status;\n};\nexport const selectLastPlayedLetter = state => {\n  return state[gameSlice.name].lastLetterPlayed;\n};\nexport const selectHasPlayedNewLetter = state => {\n  return state[gameSlice.name].hasPlayedNewLetter;\n};\nexport const selectError = state => {\n  return state[gameSlice.name].error;\n};\nexport default gameSlice.reducer;\n","/**\n * Get a version of a word with no accents or uppercase letters.\n *\n * @example getLowerNoAccentWord(\"roda\") // \"roda\"\n * @example getLowerNoAccentWord(\"Éder\") // \"eder\"\n * @example getLowerNoAccentWord(\"Extremo\") // \"extremo\"\n * @example getLowerNoAccentWord(\"êxodo\") // \"exodo\"\n * @example getLowerNoAccentWord(\"bárbara\") // \"barbara\"\n * @example getLowerNoAccentWord(\"órgãos\") // \"orgaos\"\n * @example getLowerNoAccentWord(\"à\") // \"a\"\n * @example getLowerNoAccentWord(\"perseverança\") // \"perseveranca\"\n * @example getLowerNoAccentWord(\"ídolo\") // \"idolo\"\n * @example getLowerNoAccentWord(\"miúda\") // \"miuda\"\n * @example getLowerNoAccentWord(\"lápis-lazúli\") // \"lapis-lazuli\"\n */\nexport default word => {\n  return word\n    .toLowerCase()\n    .replace(/é|ê/g, 'e')\n    .replace(/í/g, 'i')\n    .replace(/ú/g, 'u')\n    .replace(/ó|õ|ô/g, 'o')\n    .replace(/á|à|ã/g, 'a')\n    .replace(/ç/g, 'c');\n};\n","import getLowerNoAccentWord from './getLowerNoAccentWord';\n\nexport default (playedLetters, solution) =>\n  [...solution].reduce((acc, char) => {\n    const noAccentChar = getLowerNoAccentWord(char);\n    const isLetter = noAccentChar.match(/[A-Z|a-z]/i);\n\n    if (!isLetter) {\n      return acc + char;\n    }\n\n    const wasPlayed = playedLetters.includes(noAccentChar);\n\n    acc += wasPlayed ? char : '_';\n    return acc;\n  }, '');\n","import getLowerNoAccentWord from './getLowerNoAccentWord';\n\nexport default (playedLetters, solution) => {\n  const solutionWithoutAccents = getLowerNoAccentWord(solution);\n\n  return [...playedLetters].reduce((errors, letter) => {\n    if (!solutionWithoutAccents.includes(letter)) {\n      errors += letter;\n    }\n\n    return errors;\n  }, '');\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nimport { selectPlayedLetters, playLetter, selectStatus } from '../gameSlice';\nimport { GAME_STATUS } from '../options';\n\nconst Wrapper = styled.button`\n  appearance: none;\n  border: none;\n  background: transparent;\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  font-family: 'Architects Daughter', cursive;\n  padding: 1rem;\n  cursor: pointer;\n  text-decoration: underline;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nconst AlreadyPlayedWrapper = styled(Wrapper)`\n  text-decoration: line-through;\n  text-decoration-color: red;\n`;\n\nfunction GameLetterKeyboardButton({ letter }) {\n  const playedLetters = useSelector(selectPlayedLetters);\n  const status = useSelector(selectStatus);\n  const dispatch = useDispatch();\n\n  const Letter = playedLetters.includes(letter)\n    ? AlreadyPlayedWrapper\n    : Wrapper;\n\n  return (\n    <Letter\n      type=\"button\"\n      onClick={() => {\n        if (status !== GAME_STATUS.PLAYING) {\n          return;\n        }\n        dispatch(playLetter(letter));\n      }}\n    >\n      {letter}\n    </Letter>\n  );\n}\n\nGameLetterKeyboardButton.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default GameLetterKeyboardButton;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nimport GameLetterKeyboardButton from './GameLetterKeyboardButton';\n\nconst Ol = styled.ol`\n  list-style-type: none;\n  padding: 0 2rem;\n  display: grid;\n  margin: 1rem auto;\n  max-width: 360px;\n  grid-template-columns: repeat(7, minmax(1rem, 1fr));\n  text-align: center;\n  border: 2px solid black;\n  border-radius: 4px;\n`;\n\nconst letters = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\nfunction GameLetterKeyboard() {\n  return (\n    <Ol>\n      {letters.map(letter => (\n        <li key={letter}>\n          <GameLetterKeyboardButton letter={letter} />\n        </li>\n      ))}\n    </Ol>\n  );\n}\n\nexport default GameLetterKeyboard;\n","import React from 'react';\nimport { Trans } from 'react-i18next';\n\nimport PropTypes from 'prop-types';\n\nconst AlreadyPlayedLetterMessage = ({ letter }) => {\n  return (\n    <p>\n      <Trans i18nKey=\"alreadyPlayedLetterMessage\" letter={letter.toUpperCase()}>\n        Letter <em>{{ letter }}</em> was already played.\n      </Trans>\n    </p>\n  );\n};\n\nAlreadyPlayedLetterMessage.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default AlreadyPlayedLetterMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst LoadingMessage = () => {\n  const { t } = useTranslation();\n  return <p>{t(\"Press 'Reset Game' to start\")}</p>;\n};\n\nexport default LoadingMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst LoadingMessage = () => {\n  const { t } = useTranslation();\n  return <p>{t('Starting game, please wait')}</p>;\n};\n\nexport default LoadingMessage;\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { useSelector } from 'react-redux';\n\nimport { selectSolution } from '../gameSlice';\n\nconst SolutionMessage = () => {\n  const solution = useSelector(selectSolution);\n\n  return (\n    <p>\n      <Trans i18nKey=\"revealSolution\" solution={solution}>\n        The word is <strong>{{ solution }}</strong>\n      </Trans>\n    </p>\n  );\n};\n\nexport default SolutionMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport SolutionMessage from './SolutionMessage';\n\nconst LostMessage = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <p>{t('You lose!')}</p>\n      <SolutionMessage />\n    </>\n  );\n};\n\nexport default LostMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport styled from 'styled-components';\n\nconst Message = styled.p``;\n\nconst SolutionMessage = () => {\n  const { t } = useTranslation();\n\n  return <Message>{t('Type or select a letter')}</Message>;\n};\n\nexport default SolutionMessage;\n","import React from 'react';\nimport { Trans } from 'react-i18next';\n\nimport PropTypes from 'prop-types';\n\nconst RightLetterMessage = ({ letter }) => (\n  <p>\n    <Trans i18nKey=\"rightLetterMessage\" letter={letter.toUpperCase()}>\n      <em>{{ letter }}</em> is <strong>correct</strong>.\n    </Trans>\n  </p>\n);\n\nRightLetterMessage.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default RightLetterMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport SolutionMessage from './SolutionMessage';\n\nconst WonMessage = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <p>{t('You win!')}</p>\n      <SolutionMessage />\n    </>\n  );\n};\n\nexport default WonMessage;\n","import React from 'react';\nimport { Trans } from 'react-i18next';\n\nimport PropTypes from 'prop-types';\n\nconst WrongLetterMessage = ({ letter }) => (\n  <p>\n    <Trans i18nKey=\"wrongLetterMessage\" letter={letter.toUpperCase()}>\n      <em>{{ letter }}</em> is\n      <strong>wrong</strong>\n    </Trans>\n  </p>\n);\n\nWrongLetterMessage.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default WrongLetterMessage;\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport styled from 'styled-components';\n\nimport {\n  selectStatus,\n  selectSolution,\n  selectLastPlayedLetter,\n  selectHasPlayedNewLetter,\n} from '../gameSlice';\nimport { GAME_STATUS } from '../options';\nimport AlreadyPlayedLetterMessage from './AlreadyPlayedLetterMessage';\n// eslint-disable-next-line import/extensions\nimport IdleMessage from './IdleMessage';\nimport LoadingMessage from './LoadingMessage';\nimport LostMessage from './LostMessage';\nimport PlayLetterMessage from './PlayLetterMessage';\nimport RightLetterMessage from './RightLetterMessage';\nimport WonMessage from './WonMessage';\nimport WrongLetterMessage from './WrongLetterMessage';\n\nconst { IDLE, LOADING, LOST, WON } = GAME_STATUS;\n\nconst GameMessageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 3rem;\n  font-family: 'Architects Daughter', cursive;\n  margin-fd: 2rem;\n\n  p {\n    margin: 0 0 0.25rem;\n  }\n`;\n\nconst GameMessage = () => {\n  const solution = useSelector(selectSolution);\n  const lastPlayedLetter = useSelector(selectLastPlayedLetter);\n  const gameStatus = useSelector(selectStatus);\n  const hasPlayedNewLetter = useSelector(selectHasPlayedNewLetter);\n\n  const renderPlayingLetterStatus = useMemo(() => {\n    if (!lastPlayedLetter) {\n      return <></>;\n    }\n\n    if (!hasPlayedNewLetter) {\n      return <AlreadyPlayedLetterMessage letter={lastPlayedLetter} />;\n    }\n    if (solution.includes(lastPlayedLetter)) {\n      return <RightLetterMessage letter={lastPlayedLetter} />;\n    }\n    return <WrongLetterMessage letter={lastPlayedLetter} />;\n  }, [hasPlayedNewLetter, lastPlayedLetter, solution]);\n\n  function PlayingMessage() {\n    // not playing? Return matching component\n    if (gameStatus === WON) {\n      return <WonMessage solution={solution} />;\n    }\n    if (gameStatus === LOST) {\n      return <LostMessage solution={solution} />;\n    }\n    if (gameStatus === LOADING) {\n      return <LoadingMessage />;\n    }\n    if (gameStatus === IDLE) {\n      return <IdleMessage />;\n    }\n    if (!lastPlayedLetter) {\n      return <PlayLetterMessage />;\n    }\n\n    return (\n      <>\n        {renderPlayingLetterStatus}\n        <PlayLetterMessage />\n      </>\n    );\n  }\n\n  return (\n    <GameMessageWrapper role=\"alert\">\n      <PlayingMessage />\n    </GameMessageWrapper>\n  );\n};\n\nexport default GameMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1`\n  font-family: 'Architects Daughter', cursive;\n  text-transform: none;\n  text-align: center;\n  font-size: 1rem;\n  line-height: 1;\n`;\n\nconst MainTitle = styled.i`\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  font-style: normal;\n`;\n\nconst Subtitle = styled.div``;\n\nexport default () => {\n  const { t } = useTranslation();\n\n  return (\n    <Title>\n      <MainTitle lang=\"en\">Hangman (Page)</MainTitle>\n      <Subtitle>{t('The Game')}</Subtitle>\n    </Title>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\n\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nimport HangmanPage from '../../../components/HangmanPage';\nimport InvisibleButNavigable from '../../../components/InvisibleButNavigable';\nimport LanguageSelector from '../../language/LanguageSelector';\nimport { start } from '../gameSlice';\nimport getWordWithSpaces from '../utils/getWordWithSpaces';\nimport getWrongLetters from '../utils/getWrongLetters';\nimport GameLetterKeyboard from './GameLetterKeyboard';\nimport GameMessage from './GameMessage';\nimport GameTitle from './GameTitle';\n\nconst SolutionWrapper = styled.div`\n  letter-spacing: 0.5rem;\n  font-family: 'Architects Daughter', cursive;\n  text-transform: uppercase;\n  font-size: 2.25rem;\n  text-align: center;\n  font-weight: bold;\n`;\n\nconst GameControl = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Reset = styled.button`\n  background: transparent;\n  font-size: 1.5rem;\n  text-decoration: underline;\n  cursor: pointer;\n  padding: 0.2rem 1rem;\n  border: none;\n  margin-bottom: 1rem;\n  text-transform: uppercase;\n  font-family: 'Architects Daughter', cursive;\n`;\n\nconst GameScreenWrapper = styled.article`\n  max-width: 720px;\n  width: 100%;\n  margin: 4rem auto 2rem;\n`;\n\nconst GameControlTitle = InvisibleButNavigable(styled.h2``);\n\nconst GameScreen = ({ playedLetters, solution }) => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  const wrongLetters = useMemo(() => getWrongLetters(playedLetters, solution), [\n    playedLetters,\n    solution,\n  ]);\n\n  const wordWithSpaces = useMemo(\n    () => getWordWithSpaces(playedLetters, solution),\n    [solution, playedLetters]\n  );\n\n  return (\n    <GameScreenWrapper>\n      <header>\n        <GameTitle />\n      </header>\n      <main>\n        <GameMessage />\n        <HangmanPage nErrors={wrongLetters.length} />\n        <SolutionWrapper>{wordWithSpaces}</SolutionWrapper>\n      </main>\n      <GameControl>\n        <GameControlTitle>{t('Game Controls')}</GameControlTitle>\n        <GameLetterKeyboard />\n        <Reset\n          type=\"button\"\n          onClick={() => {\n            dispatch(start());\n          }}\n        >\n          {t('Reset game')}\n        </Reset>\n        <LanguageSelector />\n      </GameControl>\n    </GameScreenWrapper>\n  );\n};\n\nGameScreen.propTypes = {\n  playedLetters: PropTypes.string.isRequired,\n  solution: PropTypes.string.isRequired,\n};\n\nexport default GameScreen;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport GameScreen from './components/GameScreen';\nimport {\n  playLetter,\n  selectSolution,\n  selectPlayedLetters,\n  selectStatus,\n} from './gameSlice';\nimport { GAME_STATUS } from './options';\nimport isLetter from './utils/isLetter';\n\nexport default () => {\n  const solution = useSelector(selectSolution);\n  const playedLetters = useSelector(selectPlayedLetters);\n\n  const dispatch = useDispatch();\n  const status = useSelector(selectStatus);\n\n  useEffect(() => {\n    const handleKeyDown = ({ key, ctrlKey, metaKey }) => {\n      // CTRL+T and CMD+T don't count!\n      if (metaKey || ctrlKey || status !== GAME_STATUS.PLAYING) {\n        return;\n      }\n\n      const letterCandidate = key.toLowerCase();\n\n      // eslint-disable-next-line no-unused-expressions\n      isLetter(letterCandidate) && dispatch(playLetter(letterCandidate));\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [dispatch, status]);\n\n  return <GameScreen solution={solution} playedLetters={playedLetters} />;\n};\n","export default str => str.length === 1 && str.match(/[a-zA-Z]/i);\n","import React from 'react';\n\nimport Game from './features/game/Game';\n\nexport default function App() {\n  return <Game />;\n}\n","import getWrongLetters from './getWrongLetters';\n\nexport default (playedLetters, solution) => {\n  const wrongLetters = getWrongLetters(playedLetters, solution);\n\n  return wrongLetters.length > 5;\n};\n","import getWordWithSpaces from './getWordWithSpaces';\n\nexport default (playedLetters, solution) => {\n  return !getWordWithSpaces(playedLetters, solution).includes('_');\n};\n","import axios from 'axios';\n\nexport default class WordService {\n  // eslint-disable-next-line class-methods-use-this\n  async getWord() {\n    try {\n      const word = await axios.get(\n        'https://random-word-api.herokuapp.com/word'\n      );\n      return word.data[0];\n    } catch (e) {\n      throw new Error(`\n        Unable to get EN word:\n        -> ${e.message}\n      `);\n    }\n  }\n}\n","import WordServiceEN from './WordServiceEN';\nimport WordServicePT from './WordServicePT';\n\nconst langServices = {\n  pt: new WordServicePT(),\n  en: new WordServiceEN(),\n};\n\nexport default class WordService {\n  static getServiceFromLang(lang = 'en') {\n    return langServices[lang];\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async getWord(lang) {\n    try {\n      return await WordService.getServiceFromLang(lang).getWord();\n    } catch (e) {\n      throw new Error(`\n        Error getting word in ${lang} language:\n        -> ${e.message}\n      `);\n    }\n  }\n}\n","import axios from 'axios';\n\nexport default class WordService {\n  // eslint-disable-next-line class-methods-use-this\n  async getWord() {\n    try {\n      const {\n        data: { word },\n      } = await axios.get('https://api.dicionario-aberto.net/random');\n      return word;\n    } catch ({ message }) {\n      throw new Error(`\n        Unable to get EN word:\n        -> ${message}\n      `);\n    }\n  }\n}\n","import i18n from 'i18next';\nimport { call, put, takeEvery, all, select } from 'redux-saga/effects';\n\nimport {\n  startAfterFetch,\n  start,\n  win,\n  lose,\n  setGameError,\n  playLetter,\n  selectSolution,\n  selectPlayedLetters,\n} from '../features/game/gameSlice';\nimport hasLost from '../features/game/utils/hasLost';\nimport hasWon from '../features/game/utils/hasWon';\nimport {\n  setLanguage,\n  selectLanguage,\n} from '../features/language/languageSlice';\nimport WordService from '../services/WordService';\n\nconst wordService = new WordService();\n\nfunction* fetchWord() {\n  try {\n    const language = yield select(selectLanguage);\n    const word = yield call(wordService.getWord, language);\n    yield put(startAfterFetch(word));\n  } catch (e) {\n    yield put(setGameError(e.message));\n    throw new Error(e);\n  }\n}\n\nfunction* startAfterSetLanguage() {\n  const language = yield select(selectLanguage);\n\n  yield call(() => i18n.changeLanguage(language));\n  yield put(start());\n}\n\nfunction* setLanguageOnRehydrate() {\n  const language = yield select(selectLanguage);\n\n  yield call(() => i18n.changeLanguage(language));\n}\n\nfunction* checkGameEnd() {\n  const playedLetters = yield select(selectPlayedLetters);\n  const solution = yield select(selectSolution);\n\n  if (hasWon(playedLetters, solution)) {\n    yield put(win());\n  } else if (hasLost(playedLetters, solution)) {\n    yield put(lose());\n  }\n}\n\nexport default function* gameSaga() {\n  yield all([\n    takeEvery(start().type, fetchWord),\n    takeEvery(setLanguage().type, startAfterSetLanguage),\n    takeEvery(playLetter().type, checkGameEnd),\n    takeEvery('persist/REHYDRATE', setLanguageOnRehydrate),\n  ]);\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport createSagaMiddleware from 'redux-saga';\n\nimport gameReducer from '../features/game/gameSlice';\nimport languageReducer from '../features/language/languageSlice';\nimport appSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n  game: gameReducer,\n  language: languageReducer,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => [\n    ...getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],\n      },\n    }),\n    sagaMiddleware,\n  ],\n});\n\nsagaMiddleware.run(appSaga);\n\nexport default store;\nexport const persistor = persistStore(store);\n","import { initReactI18next } from 'react-i18next';\n\nimport i18n from 'i18next';\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  pt: {\n    translation: {\n      alreadyPlayedLetterMessage: 'Letra <1>{{ letter }}</1> já foi jogada.',\n      'Change language:': 'Trocar língua:',\n      'Game controls': 'Comandos de jogo',\n      nrErrorsFigCaption: 'Tentativas: {{ chancesLeft }}',\n      \"Press 'Reset Game' to start\": \"Carregue 'Reiniciar jogo' para começar\",\n      'Reset game': 'Recomeçar jogo',\n      revealSolution: 'A palavra é <1>{{ solution }}</1>.',\n      rightLetterMessage: '<0>{{ letter }}</0> está <2>correto</2>.',\n      'Starting game, please wait': 'A começar o jogo. Aguarde, por favor',\n      'The Game': 'O Jogo',\n      'Try again?': 'Tentar de novo?',\n      'Type or select a letter': 'Tecle ou carregue numa letra',\n      wrongLetterMessage: '<0>{{ letter }}</0> está <2>errado</2>.',\n      'You win!': 'Ganhaste!',\n      'You lose!': 'Perdeste!',\n    },\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: 'en',\n    keySeparator: false, // we do not use keys in form messages.welcome\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        // eslint-disable-next-line no-use-before-define\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        // eslint-disable-next-line no-use-before-define\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initReactI18next } from 'react-i18next';\nimport { Provider } from 'react-redux';\n\nimport i18n from 'i18next';\n\nimport './index.css';\n\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './App';\nimport store, { persistor } from './app/store';\nimport i18nConfig from './i18nConfig';\nimport * as serviceWorker from './serviceWorker';\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init(i18nConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}