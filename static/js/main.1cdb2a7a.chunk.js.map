{"version":3,"sources":["components/HangmanPage/page-head.png","components/InvisibleButNavigable.js","components/HangmanPage/HangmanPage.js","components/HangmanPage/index.js","features/game/utils/getLowerNoAccentWord.js","features/game/utils/getWordWithSpaces.js","features/game/utils/getWrongLetters.js","features/game/components/GameAside.js","features/language/options.js","features/language/languageSlice.js","features/language/LanguageSelector.js","features/game/options.js","features/game/gameSlice.js","features/game/components/GameLetterKeyboardButton.js","features/game/components/GameLetterKeyboard.js","features/game/components/GameControl.js","features/game/components/AlreadyPlayedLetterMessage.js","features/game/components/IdleMessage.js","features/game/components/LoadingMessage.js","features/game/components/SolutionMessage.js","features/game/components/LostMessage.js","features/game/components/PlayLetterMessage.js","features/game/components/RightLetterMessage.js","features/game/components/WonMessage.js","features/game/components/WrongLetterMessage.js","features/game/components/GameMessage.js","features/game/components/GameTitle.js","features/game/components/GameScreen.js","features/game/Game.js","features/game/utils/isLetter.js","App.js","features/game/utils/hasLost.js","features/game/utils/hasWon.js","services/WordServiceEN.js","services/WordService.js","services/WordServicePT.js","app/sagas.js","app/store.js","i18nConfig.js","index.js"],"names":["module","exports","Component","styled","Doll","figure","DollCaption","InvisibleButNavigable","figcaption","Head","img","nErrors","Torso","div","Limb","LeftArm","RightArm","LeftLeg","RightLeg","HangmanPage","chancesLeft","useMemo","src","headSrc","alt","Trans","i18nKey","word","toLowerCase","replace","playedLetters","solution","reduce","acc","char","noAccentChar","getLowerNoAccentWord","match","includes","solutionWithoutAccents","errors","letter","Wrapper","aside","GameAside","t","useTranslation","href","target","rel","LANGUAGES","en","pt","initialState","language","languageSlice","createSlice","name","reducers","setLanguage","state","action","payload","actions","selectLanguage","Label","label","dispatch","useDispatch","currentLang","useSelector","defaultValue","onChange","value","Object","keys","map","langCode","key","GAME_STATUS","error","lastLetterPlayed","hasPlayedNewLetter","status","gameSlice","start","startAfterFetch","setGameError","playLetter","Set","sort","join","win","lose","setMessage","selectPlayedLetters","selectSolution","selectStatus","selectLastPlayedLetter","selectHasPlayedNewLetter","button","AlreadyPlayedWrapper","GameLetterKeyboardButton","Letter","type","onClick","Ol","ol","letters","split","GameLetterKeyboard","GameControlTitle","h2","section","Reset","GameControl","LanguageSelector","AlreadyPlayedLetterMessage","LoadingMessage","SolutionMessage","LostMessage","Message","span","RightLetterMessage","toUpperCase","WonMessage","WrongLetterMessage","IDLE","LOADING","LOST","WON","GameMessageWrapper","GameMessage","lastPlayedLetter","gameStatus","renderPlayingLetterStatus","PlayingMessage","IdleMessage","PlayLetterMessage","role","Title","h1","MainTitle","i","Subtitle","lang","SolutionWrapper","GameScreenWrapper","article","GameScreen","wrongLetters","getWrongLetters","wordWithSpaces","getWordWithSpaces","GameTitle","length","useEffect","handleKeyDown","ctrlKey","metaKey","str","letterCandidate","document","addEventListener","removeEventListener","App","Game","WordService","axios","get","data","Error","message","langServices","WordServiceEN","getServiceFromLang","getWord","fetchWord","startAfterSetLanguage","setLanguageOnRehydrate","checkGameEnd","gameSaga","wordService","select","call","put","i18n","changeLanguage","hasWon","hasLost","all","takeEvery","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","game","gameReducer","languageReducer","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","run","appSaga","persistor","persistStore","use","initReactI18next","init","resources","translation","alreadyPlayedLetterMessage","nrErrorsFigCaption","revealSolution","rightLetterMessage","hangmanPageAside","hangmanPageAsideLink","wrongLetterMessage","lng","nsSeparator","keySeparator","interpolation","escapeValue","i18nConfig","ReactDOM","render","StrictMode","loading","getElementById"],"mappings":"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","file":"static/js/main.1cdb2a7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/page-head.1cc90bfe.png\";","import styled from 'styled-components';\n\nexport default Component => styled(Component)`\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(50%);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n`;\n","import React, { useMemo } from 'react';\nimport { Trans } from 'react-i18next';\n\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nimport InvisibleButNavigable from '../InvisibleButNavigable';\nimport headSrc from './page-head.png';\n\nconst bodyColor = 'black';\nconst opacityTransition = 'opacity 250ms ease-in-out';\n\nconst Doll = styled.figure`\n  width: 120px;\n  padding-bottom: 35px;\n  position: relative;\n  margin: auto;\n`;\n\nconst DollCaption = InvisibleButNavigable(styled.figcaption``);\n\nconst Head = styled.img`\n  width: 50%;\n  display: block;\n  margin: auto;\n  opacity: ${({ nErrors }) => (nErrors > 0 ? '1' : '0')};\n  transition: ${opacityTransition};\n`;\n\nconst Torso = styled.div`\n  width: 5px;\n  border-radius: 5px;\n  margin: 5px auto;\n  height: 90px;\n  background: ${bodyColor};\n  opacity: ${({ nErrors }) => (nErrors > 1 ? '1' : '0')};\n  transition: ${opacityTransition};\n`;\n\nconst Limb = styled.div`\n  width: 5px;\n  border-radius: 5px;\n  height: 30px;\n  background: ${bodyColor};\n  position: absolute;\n  transition: ${opacityTransition};\n`;\n\nconst LeftArm = styled(Limb)`\n  transform: rotate(30deg);\n  top: 85px;\n  left: 35px;\n  opacity: ${({ nErrors }) => (nErrors > 2 ? '1' : '0')};\n`;\n\nconst RightArm = styled(Limb)`\n  transform: rotate(-30deg);\n  top: 85px;\n  right: 35px;\n  opacity: ${({ nErrors }) => (nErrors > 3 ? '1' : '0')};\n`;\n\nconst LeftLeg = styled(Limb)`\n  transform: rotate(20deg);\n  top: 155px;\n  left: 45px;\n  opacity: ${({ nErrors }) => (nErrors > 4 ? '1' : '0')};\n`;\n\nconst RightLeg = styled(Limb)`\n  transform: rotate(-20deg);\n  top: 155px;\n  right: 45px;\n  opacity: ${({ nErrors }) => (nErrors > 5 ? '1' : '0')};\n`;\n\nfunction HangmanPage({ nErrors = 0 }) {\n  const chancesLeft = useMemo(() => 6 - nErrors, [nErrors]);\n\n  return (\n    <Doll>\n      <Head nErrors={nErrors} src={headSrc} alt=\"\" />\n      <Torso nErrors={nErrors} />\n      <LeftArm nErrors={nErrors} />\n      <RightArm nErrors={nErrors} />\n      <LeftLeg nErrors={nErrors} />\n      <RightLeg nErrors={nErrors} />\n      <DollCaption>\n        <Trans i18nKey=\"nrErrorsFigCaption\" chancesLeft={chancesLeft}>\n          Chances left: {{ chancesLeft }}\n        </Trans>\n      </DollCaption>\n    </Doll>\n  );\n}\n\nHangmanPage.propTypes = {\n  nErrors: PropTypes.number.isRequired,\n};\n\nexport default HangmanPage;\n","import HangmanPage from './HangmanPage';\n\nexport default HangmanPage;\n","/**\n * Get a version of a word with no accents or uppercase letters.\n *\n * @example getLowerNoAccentWord(\"roda\") // \"roda\"\n * @example getLowerNoAccentWord(\"Éder\") // \"eder\"\n * @example getLowerNoAccentWord(\"Extremo\") // \"extremo\"\n * @example getLowerNoAccentWord(\"êxodo\") // \"exodo\"\n * @example getLowerNoAccentWord(\"bárbara\") // \"barbara\"\n * @example getLowerNoAccentWord(\"órgãos\") // \"orgaos\"\n * @example getLowerNoAccentWord(\"à\") // \"a\"\n * @example getLowerNoAccentWord(\"perseverança\") // \"perseveranca\"\n * @example getLowerNoAccentWord(\"ídolo\") // \"idolo\"\n * @example getLowerNoAccentWord(\"miúda\") // \"miuda\"\n * @example getLowerNoAccentWord(\"lápis-lazúli\") // \"lapis-lazuli\"\n */\nexport default word => {\n  return word\n    .toLowerCase()\n    .replace(/é|ê/g, 'e')\n    .replace(/í/g, 'i')\n    .replace(/ú/g, 'u')\n    .replace(/ó|õ|ô/g, 'o')\n    .replace(/á|à|ã/g, 'a')\n    .replace(/ç/g, 'c');\n};\n","import getLowerNoAccentWord from './getLowerNoAccentWord';\n\nexport default (playedLetters, solution) =>\n  [...solution].reduce((acc, char) => {\n    const noAccentChar = getLowerNoAccentWord(char);\n    const isLetter = noAccentChar.match(/[A-Z|a-z]/i);\n\n    if (!isLetter) {\n      return acc + char;\n    }\n\n    const wasPlayed = playedLetters.includes(noAccentChar);\n\n    acc += wasPlayed ? char : '_';\n    return acc;\n  }, '');\n","import getLowerNoAccentWord from './getLowerNoAccentWord';\n\nexport default (playedLetters, solution) => {\n  const solutionWithoutAccents = getLowerNoAccentWord(solution);\n\n  return [...playedLetters].reduce((errors, letter) => {\n    if (!solutionWithoutAccents.includes(letter)) {\n      errors += letter;\n    }\n\n    return errors;\n  }, '');\n};\n","import React from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\n\nimport styled from 'styled-components';\n\nconst Wrapper = styled.aside`\n  position: absolute;\n  right: 0;\n  color: gray;\n  top: 8rem;\n  transform: rotate(-20deg);\n  width: 8rem;\n  text-align: center;\n  text-decoration: underline;\n  font-family: 'Architects Daughter';\n`;\n\nfunction GameAside() {\n  const { t } = useTranslation();\n  return (\n    <Wrapper>\n      <a\n        href={t('hangmanPageAsideLink')}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Trans i18nKey=\"hangmanPageAside\">\n          Who is <br />\n          Hangman Page?\n        </Trans>\n      </a>\n    </Wrapper>\n  );\n}\n\nexport default GameAside;\n","export const LANGUAGES = {\n  en: 'english',\n  pt: 'português',\n};\n\nexport const DEFAULT_LANGUAGE = 'en';\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { DEFAULT_LANGUAGE } from './options';\n\nconst initialState = {\n  language: DEFAULT_LANGUAGE,\n};\n\nexport const languageSlice = createSlice({\n  name: 'language',\n  initialState,\n  reducers: {\n    setLanguage: (state, action) => {\n      state.language = action.payload;\n    },\n  },\n});\n\nexport const { setLanguage } = languageSlice.actions;\n\nexport const selectLanguage = state => {\n  return state[languageSlice.name].language;\n};\n\nexport default languageSlice.reducer;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport styled from 'styled-components';\n\nimport { selectLanguage, setLanguage } from './languageSlice';\nimport { LANGUAGES } from './options';\n\nconst Label = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  select {\n    appearance: none;\n  }\n`;\n\nexport default () => {\n  const dispatch = useDispatch();\n  const currentLang = useSelector(selectLanguage);\n  const { t } = useTranslation();\n\n  return (\n    <Label>\n      {t('Change language:')}\n      <select\n        defaultValue={currentLang}\n        onChange={({ target }) => dispatch(setLanguage(target.value))}\n      >\n        {Object.keys(LANGUAGES).map(langCode => (\n          <option key={langCode} value={langCode}>\n            {LANGUAGES[langCode]}\n          </option>\n        ))}\n      </select>\n    </Label>\n  );\n};\n","export const GAME_STATUS = {\n  // can start game, not ready yet. Cannot play letters\n  IDLE: 'idle',\n  // can play letters\n  PLAYING: 'playing',\n  // fetching content, playing animation. No interaction\n  LOADING: 'loading',\n  // like IDLE, but counts as victory\n  WON: 'won',\n  // like IDLE, but counts as loss\n  LOST: 'lost',\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { GAME_STATUS } from './options';\n\nconst initialState = {\n  playedLetters: '',\n  solution: '',\n  error: null,\n  lastLetterPlayed: null,\n  hasPlayedNewLetter: false,\n  status: GAME_STATUS.IDLE,\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    start: state => {\n      state.playedLetters = '';\n      state.solution = '';\n      state.error = null;\n      state.status = GAME_STATUS.LOADING;\n      state.lastLetterPlayed = initialState.lastLetterPlayed;\n      state.hasPlayedNewLetter = false;\n    },\n    startAfterFetch: (state, action) => {\n      state.solution = action.payload;\n      state.status = GAME_STATUS.PLAYING;\n    },\n    setGameError: (state, action) => {\n      state.error = action.payload;\n      state.status = GAME_STATUS.IDLE;\n    },\n    playLetter: (state, { payload: letter }) => {\n      const { playedLetters } = state;\n\n      state.lastLetterPlayed = letter;\n      state.hasPlayedNewLetter = !playedLetters.includes(letter);\n      state.playedLetters = [...new Set(`${playedLetters}${letter}`)]\n        .sort()\n        .join('');\n    },\n    win: state => {\n      state.status = GAME_STATUS.WON;\n    },\n    lose: state => {\n      state.status = GAME_STATUS.LOST;\n    },\n  },\n});\n\nexport const {\n  start,\n  startAfterFetch,\n  playLetter,\n  setGameError,\n  setMessage,\n  win,\n  lose,\n} = gameSlice.actions;\n\n// `useSelector((state) => state.counter.value)`\nexport const selectPlayedLetters = state => {\n  return state[gameSlice.name].playedLetters;\n};\nexport const selectSolution = state => {\n  return state[gameSlice.name].solution;\n};\nexport const selectStatus = state => {\n  return state[gameSlice.name].status;\n};\nexport const selectLastPlayedLetter = state => {\n  return state[gameSlice.name].lastLetterPlayed;\n};\nexport const selectHasPlayedNewLetter = state => {\n  return state[gameSlice.name].hasPlayedNewLetter;\n};\nexport const selectError = state => {\n  return state[gameSlice.name].error;\n};\nexport default gameSlice.reducer;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nimport { selectPlayedLetters, playLetter, selectStatus } from '../gameSlice';\nimport { GAME_STATUS } from '../options';\n\nconst Wrapper = styled.button`\n  appearance: none;\n  border: none;\n  background: transparent;\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  font-family: 'Architects Daughter', cursive;\n  padding: 1rem;\n  cursor: pointer;\n  text-decoration: underline;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  width: 100%;\n`;\nconst AlreadyPlayedWrapper = styled(Wrapper)`\n  text-decoration: line-through;\n  text-decoration-color: red;\n`;\n\nfunction GameLetterKeyboardButton({ letter }) {\n  const playedLetters = useSelector(selectPlayedLetters);\n  const status = useSelector(selectStatus);\n  const dispatch = useDispatch();\n\n  const Letter = playedLetters.includes(letter)\n    ? AlreadyPlayedWrapper\n    : Wrapper;\n\n  return (\n    <Letter\n      type=\"button\"\n      onClick={() => {\n        if (status !== GAME_STATUS.PLAYING) {\n          return;\n        }\n        dispatch(playLetter(letter));\n      }}\n    >\n      {letter}\n    </Letter>\n  );\n}\n\nGameLetterKeyboardButton.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default GameLetterKeyboardButton;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nimport GameLetterKeyboardButton from './GameLetterKeyboardButton';\n\nconst Ol = styled.ol`\n  list-style-type: none;\n  padding: 0;\n  display: grid;\n  margin: 1rem auto;\n  grid-template-columns: repeat(9, minmax(1rem, 1fr));\n  text-align: center;\n  background-color: black;\n  grid-area: 1 / 1 / 2 / 3;\n`;\n\nconst letters = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\nfunction GameLetterKeyboard() {\n  return (\n    <Ol>\n      {letters.map(letter => (\n        <li key={letter}>\n          <GameLetterKeyboardButton letter={letter} />\n        </li>\n      ))}\n    </Ol>\n  );\n}\n\nexport default GameLetterKeyboard;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\n\nimport styled from 'styled-components';\n\nimport InvisibleButNavigable from '../../../components/InvisibleButNavigable';\nimport LanguageSelector from '../../language/LanguageSelector';\nimport { start } from '../gameSlice';\nimport GameLetterKeyboard from './GameLetterKeyboard';\n\nconst GameControlTitle = InvisibleButNavigable(styled.h2``);\nconst Wrapper = styled.section`\n  display: grid;\n  grid-template-columns: 2;\n  align-items: center;\n`;\n\nconst Reset = styled.button`\n  background: transparent;\n  font-size: 1.5rem;\n  text-decoration: underline;\n  cursor: pointer;\n  padding: 0.2rem 1rem;\n  border: none;\n  text-transform: uppercase;\n  font-family: inherit;\n`;\n\nfunction GameControl() {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  return (\n    <Wrapper>\n      <GameControlTitle>{t('Game Controls')}</GameControlTitle>\n      <GameLetterKeyboard />\n      <Reset\n        type=\"button\"\n        onClick={() => {\n          dispatch(start());\n        }}\n      >\n        {t('Reset game')}\n      </Reset>\n      <LanguageSelector />\n    </Wrapper>\n  );\n}\n\nexport default GameControl;\n","import React from 'react';\nimport { Trans } from 'react-i18next';\n\nimport PropTypes from 'prop-types';\n\nconst AlreadyPlayedLetterMessage = ({ letter }) => {\n  return (\n    <Trans i18nKey=\"alreadyPlayedLetterMessage\">\n      <em>{{ letter }}</em> was already played.\n    </Trans>\n  );\n};\n\nAlreadyPlayedLetterMessage.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default AlreadyPlayedLetterMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst LoadingMessage = () => {\n  const { t } = useTranslation();\n  return <p>{t(\"Press 'Reset Game' to start\")}</p>;\n};\n\nexport default LoadingMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst LoadingMessage = () => {\n  const { t } = useTranslation();\n  return <p>{t('Starting game, please wait')}</p>;\n};\n\nexport default LoadingMessage;\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { useSelector } from 'react-redux';\n\nimport { selectSolution } from '../gameSlice';\n\nconst SolutionMessage = () => {\n  const solution = useSelector(selectSolution);\n\n  return (\n    <Trans i18nKey=\"revealSolution\" solution={solution}>\n      The word was <strong>{{ solution }}</strong>\n    </Trans>\n  );\n};\n\nexport default SolutionMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport SolutionMessage from './SolutionMessage';\n\nconst LostMessage = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {t('You lose!')} <SolutionMessage />\n    </>\n  );\n};\n\nexport default LostMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport styled from 'styled-components';\n\nconst Message = styled.span``;\n\nconst SolutionMessage = () => {\n  const { t } = useTranslation();\n\n  return <Message>{t('Type or select a letter')}</Message>;\n};\n\nexport default SolutionMessage;\n","import React from 'react';\nimport { Trans } from 'react-i18next';\n\nimport PropTypes from 'prop-types';\n\nconst RightLetterMessage = ({ letter }) => (\n  <Trans i18nKey=\"rightLetterMessage\" letter={letter.toUpperCase()}>\n    <em>{{ letter }}</em> is <strong>correct</strong>.\n  </Trans>\n);\n\nRightLetterMessage.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default RightLetterMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst WonMessage = () => {\n  const { t } = useTranslation();\n\n  return <strong>{t('You win!')}</strong>;\n};\n\nexport default WonMessage;\n","import React from 'react';\nimport { Trans } from 'react-i18next';\n\nimport PropTypes from 'prop-types';\n\nconst WrongLetterMessage = ({ letter }) => (\n  <Trans i18nKey=\"wrongLetterMessage\">\n    <em>{{ letter }}</em> is <strong>wrong</strong>\n  </Trans>\n);\n\nWrongLetterMessage.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default WrongLetterMessage;\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { GAME_STATUS } from 'features/game/options';\nimport styled from 'styled-components';\n\nimport {\n  selectStatus,\n  selectSolution,\n  selectLastPlayedLetter,\n  selectHasPlayedNewLetter,\n} from '../gameSlice';\nimport AlreadyPlayedLetterMessage from './AlreadyPlayedLetterMessage';\n// eslint-disable-next-line import/extensions\nimport IdleMessage from './IdleMessage';\nimport LoadingMessage from './LoadingMessage';\nimport LostMessage from './LostMessage';\nimport PlayLetterMessage from './PlayLetterMessage';\nimport RightLetterMessage from './RightLetterMessage';\nimport WonMessage from './WonMessage';\nimport WrongLetterMessage from './WrongLetterMessage';\n\nconst { IDLE, LOADING, LOST, WON } = GAME_STATUS;\n\nconst GameMessageWrapper = styled.div`\n  font-family: 'Architects Daughter', cursive;\n  margin: 1rem 0;\n  text-align: center;\n  em {\n    display: inline;\n    text-transform: uppercase;\n  }\n  strong {\n    display: inline;\n  }\n`;\n\nconst GameMessage = () => {\n  const solution = useSelector(selectSolution);\n  const lastPlayedLetter = useSelector(selectLastPlayedLetter);\n  const gameStatus = useSelector(selectStatus);\n  const hasPlayedNewLetter = useSelector(selectHasPlayedNewLetter);\n\n  const renderPlayingLetterStatus = useMemo(() => {\n    if (!lastPlayedLetter) {\n      return <></>;\n    }\n\n    if (!hasPlayedNewLetter) {\n      return <AlreadyPlayedLetterMessage letter={lastPlayedLetter} />;\n    }\n    if (solution.includes(lastPlayedLetter)) {\n      return <RightLetterMessage letter={lastPlayedLetter} />;\n    }\n    return <WrongLetterMessage letter={lastPlayedLetter} />;\n  }, [hasPlayedNewLetter, lastPlayedLetter, solution]);\n\n  function PlayingMessage() {\n    // not playing? Return matching component\n    if (gameStatus === WON) {\n      return <WonMessage />;\n    }\n    if (gameStatus === LOST) {\n      return <LostMessage solution={solution} />;\n    }\n    if (gameStatus === LOADING) {\n      return <LoadingMessage />;\n    }\n    if (gameStatus === IDLE) {\n      return <IdleMessage />;\n    }\n    if (!lastPlayedLetter) {\n      return <PlayLetterMessage />;\n    }\n\n    return (\n      <>\n        {renderPlayingLetterStatus} <PlayLetterMessage />\n      </>\n    );\n  }\n\n  return (\n    <GameMessageWrapper role=\"alert\">\n      <PlayingMessage />\n    </GameMessageWrapper>\n  );\n};\n\nexport default GameMessage;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1`\n  font-family: 'Architects Daughter', cursive;\n  text-transform: none;\n  text-align: center;\n  font-size: 1rem;\n  line-height: 1;\n`;\n\nconst MainTitle = styled.i`\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  font-style: normal;\n`;\n\nconst Subtitle = styled.span`\n  display: inline-block;\n  margin-left: 1rem;\n`;\n\nexport default () => {\n  const { t } = useTranslation();\n\n  return (\n    <Title>\n      <MainTitle lang=\"en\">Hangman (Page)</MainTitle>\n      <Subtitle>{t('The Game')}</Subtitle>\n    </Title>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nimport HangmanPage from '../../../components/HangmanPage';\nimport getWordWithSpaces from '../utils/getWordWithSpaces';\nimport getWrongLetters from '../utils/getWrongLetters';\nimport GameAside from './GameAside';\nimport GameControl from './GameControl';\nimport GameMessage from './GameMessage';\nimport GameTitle from './GameTitle';\n\nconst SolutionWrapper = styled.div`\n  letter-spacing: 0.5rem;\n  font-family: 'Architects Daughter', cursive;\n  text-transform: uppercase;\n  font-size: 2.25rem;\n  text-align: center;\n  font-weight: bold;\n`;\n\nconst GameScreenWrapper = styled.article`\n  position: relative;\n  max-width: 560px;\n  width: 100%;\n  margin: 1rem auto;\n  font-family: 'Architects Daughter', cursive;\n`;\n\nconst GameScreen = ({ playedLetters, solution }) => {\n  const wrongLetters = useMemo(() => getWrongLetters(playedLetters, solution), [\n    playedLetters,\n    solution,\n  ]);\n\n  const wordWithSpaces = useMemo(\n    () => getWordWithSpaces(playedLetters, solution),\n    [solution, playedLetters]\n  );\n\n  return (\n    <GameScreenWrapper>\n      <header>\n        <GameTitle />\n      </header>\n      <GameAside />\n      <main>\n        <GameMessage />\n        <HangmanPage nErrors={wrongLetters.length} />\n        <SolutionWrapper>{wordWithSpaces}</SolutionWrapper>\n        <GameControl />\n      </main>\n    </GameScreenWrapper>\n  );\n};\n\nGameScreen.propTypes = {\n  playedLetters: PropTypes.string.isRequired,\n  solution: PropTypes.string.isRequired,\n};\n\nexport default GameScreen;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport GameScreen from './components/GameScreen';\nimport {\n  playLetter,\n  selectSolution,\n  selectPlayedLetters,\n  selectStatus,\n} from './gameSlice';\nimport { GAME_STATUS } from './options';\nimport isLetter from './utils/isLetter';\n\nexport default () => {\n  const solution = useSelector(selectSolution);\n  const playedLetters = useSelector(selectPlayedLetters);\n\n  const dispatch = useDispatch();\n  const status = useSelector(selectStatus);\n\n  useEffect(() => {\n    const handleKeyDown = ({ key, ctrlKey, metaKey }) => {\n      // CTRL+T and CMD+T don't count!\n      if (metaKey || ctrlKey || status !== GAME_STATUS.PLAYING) {\n        return;\n      }\n\n      const letterCandidate = key.toLowerCase();\n\n      // eslint-disable-next-line no-unused-expressions\n      isLetter(letterCandidate) && dispatch(playLetter(letterCandidate));\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [dispatch, status]);\n\n  return <GameScreen solution={solution} playedLetters={playedLetters} />;\n};\n","export default str => str.length === 1 && str.match(/[a-zA-Z]/i);\n","import React from 'react';\n\nimport Game from './features/game/Game';\n\nexport default function App() {\n  return <Game />;\n}\n","import getWrongLetters from './getWrongLetters';\n\nexport default (playedLetters, solution) => {\n  const wrongLetters = getWrongLetters(playedLetters, solution);\n\n  return wrongLetters.length > 5;\n};\n","import getWordWithSpaces from './getWordWithSpaces';\n\nexport default (playedLetters, solution) => {\n  return !getWordWithSpaces(playedLetters, solution).includes('_');\n};\n","import axios from 'axios';\n\nexport default class WordService {\n  // eslint-disable-next-line class-methods-use-this\n  async getWord() {\n    try {\n      const word = await axios.get(\n        'https://random-word-api.herokuapp.com/word'\n      );\n      return word.data[0];\n    } catch (e) {\n      throw new Error(`\n        Unable to get EN word:\n        -> ${e.message}\n      `);\n    }\n  }\n}\n","import WordServiceEN from './WordServiceEN';\nimport WordServicePT from './WordServicePT';\n\nconst langServices = {\n  pt: new WordServicePT(),\n  en: new WordServiceEN(),\n};\n\nexport default class WordService {\n  static getServiceFromLang(lang = 'en') {\n    return langServices[lang];\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async getWord(lang) {\n    try {\n      return await WordService.getServiceFromLang(lang).getWord();\n    } catch (e) {\n      throw new Error(`\n        Error getting word in ${lang} language:\n        -> ${e.message}\n      `);\n    }\n  }\n}\n","import axios from 'axios';\n\nexport default class WordService {\n  // eslint-disable-next-line class-methods-use-this\n  async getWord() {\n    try {\n      const {\n        data: { word },\n      } = await axios.get('https://api.dicionario-aberto.net/random');\n      return word;\n    } catch ({ message }) {\n      throw new Error(`\n        Unable to get EN word:\n        -> ${message}\n      `);\n    }\n  }\n}\n","import i18n from 'i18next';\nimport { call, put, takeEvery, all, select } from 'redux-saga/effects';\n\nimport {\n  startAfterFetch,\n  start,\n  win,\n  lose,\n  setGameError,\n  playLetter,\n  selectSolution,\n  selectPlayedLetters,\n} from '../features/game/gameSlice';\nimport hasLost from '../features/game/utils/hasLost';\nimport hasWon from '../features/game/utils/hasWon';\nimport {\n  setLanguage,\n  selectLanguage,\n} from '../features/language/languageSlice';\nimport WordService from '../services/WordService';\n\nconst wordService = new WordService();\n\nfunction* fetchWord() {\n  try {\n    const language = yield select(selectLanguage);\n    const word = yield call(wordService.getWord, language);\n    yield put(startAfterFetch(word));\n  } catch (e) {\n    yield put(setGameError(e.message));\n    throw new Error(e);\n  }\n}\n\nfunction* startAfterSetLanguage() {\n  const language = yield select(selectLanguage);\n\n  yield call(() => i18n.changeLanguage(language));\n  yield put(start());\n}\n\nfunction* setLanguageOnRehydrate() {\n  const language = yield select(selectLanguage);\n\n  yield call(() => i18n.changeLanguage(language));\n}\n\nfunction* checkGameEnd() {\n  const playedLetters = yield select(selectPlayedLetters);\n  const solution = yield select(selectSolution);\n\n  if (hasWon(playedLetters, solution)) {\n    yield put(win());\n  } else if (hasLost(playedLetters, solution)) {\n    yield put(lose());\n  }\n}\n\nexport default function* gameSaga() {\n  yield all([\n    takeEvery(start().type, fetchWord),\n    takeEvery(setLanguage().type, startAfterSetLanguage),\n    takeEvery(playLetter().type, checkGameEnd),\n    takeEvery('persist/REHYDRATE', setLanguageOnRehydrate),\n  ]);\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport createSagaMiddleware from 'redux-saga';\n\nimport gameReducer from '../features/game/gameSlice';\nimport languageReducer from '../features/language/languageSlice';\nimport appSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n  game: gameReducer,\n  language: languageReducer,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => [\n    ...getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],\n      },\n    }),\n    sagaMiddleware,\n  ],\n});\n\nsagaMiddleware.run(appSaga);\n\nexport default store;\nexport const persistor = persistStore(store);\n","import { initReactI18next } from 'react-i18next';\n\nimport i18n from 'i18next';\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  pt: {\n    translation: {\n      alreadyPlayedLetterMessage: 'Letra <1>{{ letter }}</1> já foi jogada.',\n      'Change language:': 'Mudar língua:',\n      'Game controls': 'Comandos de jogo',\n      nrErrorsFigCaption: 'Tentativas: {{ chancesLeft }}',\n      \"Press 'Reset Game' to start\": \"Carregue 'Reiniciar jogo' para começar\",\n      'Reset game': 'Recomeçar',\n      revealSolution: 'A palavra era <1>{{ solution }}</1>.',\n      rightLetterMessage: '<0>{{ letter }}</0> está <2>correto</2>.',\n      'Starting game, please wait': 'A começar o jogo. Aguarde, por favor',\n      'The Game': 'O Jogo',\n      'Try again?': 'Tentar de novo?',\n      'Type or select a letter': 'Tecle ou carregue numa letra',\n      hangmanPageAside: 'Quem é <1 />Hangman Page?',\n      hangmanPageAsideLink: 'https://pt.wikipedia.org/wiki/Adam_Page',\n      wrongLetterMessage: '<0>{{ letter }}</0> está <2>errado</2>.',\n      'You win!': 'Ganhaste!',\n      'You lose!': 'Perdeste!',\n    },\n  },\n  en: {\n    translation: {\n      hangmanPageAsideLink: 'https://en.wikipedia.org/wiki/Adam_Page',\n    },\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: 'en',\n    // for colons\n    nsSeparator: false,\n    keySeparator: false, // we do not use keys in form messages.welcome\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initReactI18next } from 'react-i18next';\nimport { Provider } from 'react-redux';\n\nimport i18n from 'i18next';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport './index.css';\n\nimport App from './App';\nimport store, { persistor } from './app/store';\nimport i18nConfig from './i18nConfig';\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init(i18nConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}