{"version":3,"sources":["components/HangmanPage/page-head.png","components/InvisibleButNavigable.js","components/HangmanPage/HangmanPage.js","components/HangmanPage/index.js","features/game/components/GameTitle.js","features/game/options.js","features/game/gameSlice.js","features/game/components/SolutionMessage.js","features/game/components/PlayAgainMessage.js","features/game/components/WonMessage.js","features/game/components/LostMessage.js","features/game/components/RightLetterMessage.js","features/game/components/WrongLetterMessage.js","features/game/components/AlreadyPlayedLetterMessage.js","features/game/components/PlayLetterMessage.js","features/game/components/GameMessage.js","features/game/components/GameErrors.js","features/language/options.js","features/language/languageSlice.js","features/language/LanguageSelector.js","features/game/utils/getLowerNoAccentWord.js","features/game/utils/getWrongLetters.js","features/game/utils/getWordWithSpaces.js","features/game/components/GameScreen.js","features/game/Game.js","features/game/utils/isLetter.js","App.js","services/WordServiceEN.js","services/WordServicePT.js","services/WordService.js","features/game/utils/hasWon.js","features/game/utils/hasLost.js","app/sagas.js","app/store.js","serviceWorker.js","i18nConfig.js","index.js"],"names":["module","exports","Component","styled","Doll","figure","DollCaption","InvisibleButNavigable","figcaption","Head","img","nErrors","Torso","div","Limb","LeftArm","RightArm","LeftLeg","RightLeg","HangmanPage","chancesLeft","useMemo","src","headSrc","alt","Trans","i18nKey","Title","h1","MainTitle","i","Subtitle","t","useTranslation","lang","GAME_STATUS","initialState","playedLetters","solution","error","lastLetterPlayed","hasPlayedNewLetter","status","gameSlice","createSlice","name","reducers","start","state","startAfterFetch","action","payload","setGameError","playLetter","letter","includes","Set","sort","join","win","lose","actions","setMessage","selectPlayedLetters","selectSolution","selectStatus","selectLastPlayedLetter","selectHasPlayedNewLetter","SolutionMessage","useSelector","WonMessage","PlayAgainMessage","LostMessage","RightLetterMessage","toUpperCase","WrongLetterMessage","AlreadyPlayedLetterMessage","Message","p","IDLE","LOADING","LOST","WON","LoadingMessage","IdleMessage","GameMessageWrapper","GameMessage","lastPlayedLetter","gameStatus","renderPlayingLetterStatus","PlayingMessage","PlayLetterMessage","role","GameErrorWrapper","section","ErrorList","ul","ErrorListLetter","li","InvisibleButDetectableTitle","h2","GameErrors","errors","map","key","LANGUAGES","en","pt","language","languageSlice","setLanguage","selectLanguage","Select","select","dispatch","useDispatch","currentLang","defaultValue","onChange","target","value","Object","keys","langCode","word","toLowerCase","replace","solutionWithoutAccents","getLowerNoAccentWord","reduce","acc","char","noAccentChar","match","SolutionWrapper","GameControl","Reset","button","GameScreenWrapper","article","GameScreen","wrongLetters","getWrongLetters","wordWithSpaces","getWordWithSpaces","GameTitle","length","type","onClick","LanguageSelector","useEffect","handleKeyDown","ctrlKey","metaKey","str","letterCandidate","document","addEventListener","removeEventListener","App","Game","WordService","axios","get","data","Error","message","getServiceFromLang","getWord","langServices","defaultLang","WordServicePT","WordServiceEN","fetchWord","startAfterSetLanguage","setLanguageOnRehydrate","checkGameEnd","gameSaga","wordService","call","put","i18n","changeLanguage","hasWon","hasLost","all","takeEvery","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","game","gameReducer","languageReducer","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","run","appSaga","persistor","persistStore","Boolean","window","location","hostname","use","initReactI18next","init","resources","translation","nrErrorsFigCaption","revealSolution","lng","keySeparator","interpolation","escapeValue","i18nConfig","ReactDOM","render","StrictMode","loading","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b15ff1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/page-head.1cc90bfe.png\";","import styled from \"styled-components\";\n\nexport default (Component) => styled(Component)`\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(50%);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n`;\n","import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { Trans } from \"react-i18next\";\n\nimport headSrc from \"./page-head.png\";\nimport InvisibleButNavigable from \"../InvisibleButNavigable\";\n\nconst bodyColor = \"black\";\nconst opacityTransition = \"opacity 250ms ease-in-out\";\n\nconst Doll = styled.figure`\n  width: 120px;\n  padding-bottom: 35px;\n  position: relative;\n  margin: auto;\n`;\n\nconst DollCaption = InvisibleButNavigable(styled.figcaption``);\n\nconst Head = styled.img`\n  width: 50%;\n  display: block;\n  margin: auto;\n  opacity: ${({ nErrors }) => (nErrors > 0 ? \"1\" : \"0\")};\n  transition: ${opacityTransition};\n`;\n\nconst Torso = styled.div`\n  width: 5px;\n  border-radius: 5px;\n  margin: 5px auto;\n  height: 90px;\n  background: ${bodyColor};\n  opacity: ${({ nErrors }) => (nErrors > 1 ? \"1\" : \"0\")};\n  transition: ${opacityTransition};\n`;\n\nconst Limb = styled.div`\n  width: 5px;\n  border-radius: 5px;\n  height: 30px;\n  background: ${bodyColor};\n  position: absolute;\n  transition: ${opacityTransition};\n`;\n\nconst LeftArm = styled(Limb)`\n  transform: rotate(30deg);\n  top: 85px;\n  left: 35px;\n  opacity: ${({ nErrors }) => (nErrors > 2 ? \"1\" : \"0\")};\n`;\n\nconst RightArm = styled(Limb)`\n  transform: rotate(-30deg);\n  top: 85px;\n  right: 35px;\n  opacity: ${({ nErrors }) => (nErrors > 3 ? \"1\" : \"0\")};\n`;\n\nconst LeftLeg = styled(Limb)`\n  transform: rotate(20deg);\n  top: 155px;\n  left: 45px;\n  opacity: ${({ nErrors }) => (nErrors > 4 ? \"1\" : \"0\")};\n`;\n\nconst RightLeg = styled(Limb)`\n  transform: rotate(-20deg);\n  top: 155px;\n  right: 45px;\n  opacity: ${({ nErrors }) => (nErrors > 5 ? \"1\" : \"0\")};\n`;\n\nfunction HangmanPage({ nErrors = 0 }) {\n  const chancesLeft = useMemo(() => 6 - nErrors, [nErrors]);\n\n  return (\n    <Doll>\n      <Head nErrors={nErrors} src={headSrc} alt=\"\" />\n      <Torso nErrors={nErrors}></Torso>\n      <LeftArm nErrors={nErrors}></LeftArm>\n      <RightArm nErrors={nErrors}></RightArm>\n      <LeftLeg nErrors={nErrors}></LeftLeg>\n      <RightLeg nErrors={nErrors}></RightLeg>\n      <DollCaption>\n        <Trans i18nKey=\"nrErrorsFigCaption\" chancesLeft={chancesLeft}>\n          Chances left: {{ chancesLeft }}\n        </Trans>\n      </DollCaption>\n    </Doll>\n  );\n}\n\nHangmanPage.propTypes = {\n  nErrors: PropTypes.number,\n};\n\nexport default HangmanPage;\n","import HangmanPage from \"./HangmanPage\";\n\nexport default HangmanPage;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Title = styled.h1`\n  font-family: \"Architects Daughter\", cursive;\n  text-transform: none;\n  text-align: center;\n  font-size: 1rem;\n  line-height: 1;\n`;\n\nconst MainTitle = styled.i`\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  font-style: normal;\n`;\n\nconst Subtitle = styled.div``;\n\nexport default () => {\n  const { t } = useTranslation();\n\n  return (\n    <Title>\n      <MainTitle lang=\"en\">Hangman (Page)</MainTitle>\n      <Subtitle>{t(\"The Game\")}</Subtitle>\n    </Title>\n  );\n};\n","export const GAME_STATUS = {\n  // can start game, not ready yet. Cannot play letters\n  IDLE: \"idle\",\n  // can play letters\n  PLAYING: \"playing\",\n  // fetching content, playing animation. No interaction\n  LOADING: \"loading\",\n  // like IDLE, but counts as victory\n  WON: \"won\",\n  // like IDLE, but counts as loss\n  LOST: \"lost\",\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { GAME_STATUS } from \"./options\";\r\n\r\nconst initialState = {\r\n  playedLetters: \"\",\r\n  solution: \"\",\r\n  error: null,\r\n  lastLetterPlayed: null,\r\n  hasPlayedNewLetter: false,\r\n  status: GAME_STATUS.IDLE,\r\n};\r\n\r\nexport const gameSlice = createSlice({\r\n  name: \"game\",\r\n  initialState,\r\n  reducers: {\r\n    start: (state) => {\r\n      state.playedLetters = \"\";\r\n      state.solution = \"\";\r\n      state.error = null;\r\n      state.status = GAME_STATUS.LOADING;\r\n      state.lastLetterPlayed = initialState.lastLetterPlayed;\r\n      state.hasPlayedNewLetter = false;\r\n    },\r\n    startAfterFetch: (state, action) => {\r\n      state.solution = action.payload;\r\n      state.status = GAME_STATUS.PLAYING;\r\n    },\r\n    setGameError: (state, action) => {\r\n      state.error = action.payload;\r\n      state.status = GAME_STATUS.IDLE;\r\n    },\r\n    playLetter: (state, { payload: letter }) => {\r\n      const { playedLetters } = state;\r\n\r\n      state.lastLetterPlayed = letter;\r\n      state.hasPlayedNewLetter = !playedLetters.includes(letter);\r\n      state.playedLetters = [...new Set(`${playedLetters}${letter}`)]\r\n        .sort()\r\n        .join(\"\");\r\n    },\r\n    win: (state) => {\r\n      state.status = GAME_STATUS.WON;\r\n    },\r\n    lose: (state) => {\r\n      state.status = GAME_STATUS.LOST;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  start,\r\n  startAfterFetch,\r\n  playLetter,\r\n  setGameError,\r\n  setMessage,\r\n  win,\r\n  lose,\r\n} = gameSlice.actions;\r\n\r\n// `useSelector((state) => state.counter.value)`\r\nexport const selectPlayedLetters = (state) => {\r\n  return state[gameSlice.name].playedLetters;\r\n};\r\nexport const selectSolution = (state) => {\r\n  return state[gameSlice.name].solution;\r\n};\r\nexport const selectStatus = (state) => {\r\n  return state[gameSlice.name].status;\r\n};\r\nexport const selectLastPlayedLetter = (state) => {\r\n  return state[gameSlice.name].lastLetterPlayed;\r\n};\r\nexport const selectHasPlayedNewLetter = (state) => {\r\n  return state[gameSlice.name].hasPlayedNewLetter;\r\n};\r\nexport const selectError = (state) => {\r\n  return state[gameSlice.name].error;\r\n};\r\nexport default gameSlice.reducer;\r\n","import React from \"react\";\nimport { Trans } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectSolution } from \"../gameSlice\";\n\nconst SolutionMessage = () => {\n  const solution = useSelector(selectSolution);\n\n  return (\n    <p>\n      <Trans i18nKey=\"revealSolution\" solution={solution}>\n        The word is <strong>{{ solution }}</strong>\n      </Trans>\n    </p>\n  );\n};\n\nexport default SolutionMessage;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst SolutionMessage = () => {\n  const { t } = useTranslation();\n\n  return <p>{t(\"Try again?\")}</p>;\n};\n\nexport default SolutionMessage;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport SolutionMessage from \"./SolutionMessage\";\nimport PlayAgainMessage from \"./PlayAgainMessage\";\n\nconst WonMessage = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <p>{t(\"You win!\")}</p>\n      <SolutionMessage />\n      <PlayAgainMessage />\n    </>\n  );\n};\n\nexport default WonMessage;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport SolutionMessage from \"./SolutionMessage\";\nimport PlayAgainMessage from \"./PlayAgainMessage\";\n\nconst LostMessage = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <p>{t(\"Too bad, you lost!\")}</p>\n      <SolutionMessage />\n      <PlayAgainMessage />\n    </>\n  );\n};\n\nexport default LostMessage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Trans } from \"react-i18next\";\n\nconst RightLetterMessage = ({ letter }) => (\n  <p>\n    <Trans i18nKey=\"rightLetterMessage\">\n      <em>\"{letter.toUpperCase()}\"</em> is <strong>correct</strong>\n    </Trans>\n  </p>\n);\n\nRightLetterMessage.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default RightLetterMessage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Trans } from \"react-i18next\";\n\nconst WrongLetterMessage = ({ letter }) => (\n  <p>\n    <Trans i18nKey=\"wrongLetterMessage\">\n      <em>\"{letter.toUpperCase()}\"</em> is <strong>wrong</strong>\n    </Trans>\n  </p>\n);\n\nWrongLetterMessage.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default WrongLetterMessage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Trans } from \"react-i18next\";\n\nconst AlreadyPlayedLetterMessage = ({ letter }) => (\n  <p>\n    <Trans i18nKey=\"alreadyPlayedLetterMessage\">\n      <em>\"{letter.toUpperCase()}\"</em> was already played\n    </Trans>\n  </p>\n);\n\nAlreadyPlayedLetterMessage.propTypes = {\n  letter: PropTypes.string.isRequired,\n};\n\nexport default AlreadyPlayedLetterMessage;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styled from \"styled-components\";\n\nconst Message = styled.p``;\n\nconst SolutionMessage = () => {\n  const { t } = useTranslation();\n\n  return <Message>{t(\"Type or select a letter\")}</Message>;\n};\n\nexport default SolutionMessage;\n","import React, { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport { GAME_STATUS } from \"../options\";\nimport {\n  selectStatus,\n  selectSolution,\n  selectLastPlayedLetter,\n  selectHasPlayedNewLetter,\n} from \"../gameSlice\";\nimport WonMessage from \"./WonMessage\";\nimport LostMessage from \"./LostMessage\";\nimport RightLetterMessage from \"./RightLetterMessage\";\nimport WrongLetterMessage from \"./WrongLetterMessage\";\nimport AlreadyPlayedLetterMessage from \"./AlreadyPlayedLetterMessage\";\nimport PlayLetterMessage from \"./PlayLetterMessage\";\n\nconst { IDLE, LOADING, LOST, WON } = GAME_STATUS;\n\nconst LoadingMessage = () => <p>\"Starting game, please wait\"</p>;\n\nconst IdleMessage = () => <p>Press \"Play\" to start a new game</p>;\n\nconst GameMessageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 5em;\n  font-family: \"Architects Daughter\", cursive;\n  margin-bottom: 2rem;\n\n  p {\n    margin: 0 0 0.25rem;\n  }\n`;\n\nconst GameMessage = () => {\n  const solution = useSelector(selectSolution);\n  const lastPlayedLetter = useSelector(selectLastPlayedLetter);\n  const gameStatus = useSelector(selectStatus);\n  const hasPlayedNewLetter = useSelector(selectHasPlayedNewLetter);\n\n  const renderPlayingLetterStatus = useMemo(() => {\n    if (!hasPlayedNewLetter) {\n      return <AlreadyPlayedLetterMessage letter={lastPlayedLetter} />;\n    } else if (solution.includes(lastPlayedLetter)) {\n      return <RightLetterMessage letter={lastPlayedLetter} />;\n    } else {\n      return <WrongLetterMessage letter={lastPlayedLetter} />;\n    }\n  }, [hasPlayedNewLetter, lastPlayedLetter, solution]);\n\n  function PlayingMessage() {\n    // not playing? Return matching component\n    if (gameStatus === WON) {\n      return <WonMessage solution={solution} />;\n    }\n    if (gameStatus === LOST) {\n      return <LostMessage solution={solution} />;\n    }\n    if (gameStatus === LOADING) {\n      return <LoadingMessage></LoadingMessage>;\n    }\n    if (gameStatus === IDLE) {\n      return <IdleMessage></IdleMessage>;\n    }\n    if (!lastPlayedLetter) {\n      return <PlayLetterMessage></PlayLetterMessage>;\n    }\n\n    return (\n      <>\n        {renderPlayingLetterStatus}\n        <PlayLetterMessage></PlayLetterMessage>\n      </>\n    );\n  }\n\n  return (\n    <GameMessageWrapper role=\"alert\">\n      <PlayingMessage></PlayingMessage>\n    </GameMessageWrapper>\n  );\n};\n\nexport default GameMessage;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nimport InvisibleButNavigable from \"../../../components/InvisibleButNavigable\";\n\nconst GameErrorWrapper = styled.section`\n  font-size: 0.7rem;\n  font-family: \"Architects Daughter\", cursive;\n  padding: 1rem 0;\n`;\n\nconst ErrorList = styled.ul`\n  padding: 0;\n  margin: 0;\n  text-align: center;\n  list-style-type: none;\n  display: flex;\n  justify-content: center;\n  font-size: 1.5rem;\n`;\n\nconst ErrorListLetter = styled.li`\n  text-decoration: line-through;\n  text-decoration-color: red;\n  margin: 0 0.2rem;\n  text-transform: uppercase;\n`;\n\nconst Title = styled.h2``;\n\nconst InvisibleButDetectableTitle = InvisibleButNavigable(Title);\n\nconst GameErrors = ({ errors }) => (\n  <GameErrorWrapper>\n    <InvisibleButDetectableTitle>Errors</InvisibleButDetectableTitle>\n    <ErrorList>\n      {[...errors].map((letter) => (\n        <ErrorListLetter key={letter}>{letter}</ErrorListLetter>\n      ))}\n    </ErrorList>\n  </GameErrorWrapper>\n);\n\nGameErrors.propTypes = {\n  errors: PropTypes.string.isRequired,\n};\n\nexport default GameErrors;\n","export const LANGUAGES = {\n  en: \"english\",\n  pt: \"português\",\n};\n\nexport const DEFAULT_LANGUAGE = \"en\";\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { DEFAULT_LANGUAGE } from \"./options\";\r\n\r\nconst initialState = {\r\n  language: DEFAULT_LANGUAGE,\r\n};\r\n\r\nexport const languageSlice = createSlice({\r\n  name: \"language\",\r\n  initialState,\r\n  reducers: {\r\n    setLanguage: (state, action) => {\r\n      state.language = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setLanguage } = languageSlice.actions;\r\n\r\nexport const selectLanguage = (state) => {\r\n  return state[languageSlice.name].language;\r\n};\r\n\r\nexport default languageSlice.reducer;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { selectLanguage, setLanguage } from \"./languageSlice\";\nimport { LANGUAGES } from \"./options\";\n\nconst Select = styled.select`\n  -webkit-appearance: none;\n`;\n\nexport default function () {\n  const dispatch = useDispatch();\n  const currentLang = useSelector(selectLanguage);\n\n  return (\n    <label>\n      Change language:\n      <Select\n        defaultValue={currentLang}\n        onChange={({ target }) => dispatch(setLanguage(target.value))}\n      >\n        {Object.keys(LANGUAGES).map((langCode) => (\n          <option key={langCode} value={langCode}>\n            {LANGUAGES[langCode]}\n          </option>\n        ))}\n      </Select>\n    </label>\n  );\n}\n","/**\n * Get a version of a word with no accents or uppercase letters.\n *\n * @example getLowerNoAccentWord(\"roda\") // \"roda\"\n * @example getLowerNoAccentWord(\"Éder\") // \"eder\"\n * @example getLowerNoAccentWord(\"Extremo\") // \"extremo\"\n * @example getLowerNoAccentWord(\"êxodo\") // \"exodo\"\n * @example getLowerNoAccentWord(\"bárbara\") // \"barbara\"\n * @example getLowerNoAccentWord(\"órgãos\") // \"orgaos\"\n * @example getLowerNoAccentWord(\"à\") // \"a\"\n * @example getLowerNoAccentWord(\"perseverança\") // \"perseveranca\"\n * @example getLowerNoAccentWord(\"ídolo\") // \"idolo\"\n * @example getLowerNoAccentWord(\"miúda\") // \"miuda\"\n * @example getLowerNoAccentWord(\"lápis-lazúli\") // \"lapis-lazuli\"\n */\nexport default (word) => {\n  return word\n    .toLowerCase()\n    .replace(/é|ê/g, \"e\")\n    .replace(/í/g, \"i\")\n    .replace(/ú/g, \"u\")\n    .replace(/ó|õ|ô/g, \"o\")\n    .replace(/á|à|ã/g, \"a\")\n    .replace(/ç/g, \"c\");\n};\n","import getLowerNoAccentWord from \"./getLowerNoAccentWord\";\n\nexport default (playedLetters, solution) => {\n  const solutionWithoutAccents = getLowerNoAccentWord(solution);\n\n  return [...playedLetters].reduce((errors, letter) => {\n    if (!solutionWithoutAccents.includes(letter)) {\n      errors += letter;\n    }\n\n    return errors;\n  }, \"\");\n};\n","import getLowerNoAccentWord from \"./getLowerNoAccentWord\";\n\nexport default (playedLetters, solution) =>\n  [...solution].reduce((acc, char) => {\n    const noAccentChar = getLowerNoAccentWord(char);\n    const isLetter = noAccentChar.match(/[A-Z|a-z]/i);\n\n    if (!isLetter) {\n      return acc + char;\n    }\n\n    const wasPlayed = playedLetters.includes(noAccentChar);\n\n    acc += wasPlayed ? char : \"_\";\n    return acc;\n  }, \"\");\n","import React, { useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport HangmanPage from \"../../../components/HangmanPage\";\r\nimport GameTitle from \"./GameTitle\";\r\nimport GameMessage from \"./GameMessage\";\r\nimport GameErrors from \"./GameErrors\";\r\nimport LanguageSelector from \"../../language/LanguageSelector\";\r\nimport { start } from \"../gameSlice\";\r\nimport getWrongLetters from \"../utils/getWrongLetters\";\r\nimport getWordWithSpaces from \"../utils/getWordWithSpaces\";\r\n\r\nconst SolutionWrapper = styled.div`\r\n  letter-spacing: 0.5rem;\r\n  font-family: \"Architects Daughter\", cursive;\r\n  text-transform: uppercase;\r\n  font-size: 2.25rem;\r\n  text-align: center;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst GameControl = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Reset = styled.button`\r\n  background: transparent;\r\n  font-size: 1.5rem;\r\n  text-decoration: underline;\r\n  cursor: pointer;\r\n  padding: 0.2rem 1rem;\r\n  border: none;\r\n  margin-bottom: 1rem;\r\n  text-transform: uppercase;\r\n  font-family: \"Architects Daughter\", cursive;\r\n`;\r\n\r\nconst GameScreenWrapper = styled.article`\r\n  max-width: 720px;\r\n  width: 100%;\r\n  margin: 4rem auto 2rem;\r\n`;\r\n\r\nconst GameScreen = ({ playedLetters, solution }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const wrongLetters = useMemo(() => getWrongLetters(playedLetters, solution), [\r\n    playedLetters,\r\n    solution,\r\n  ]);\r\n\r\n  const wordWithSpaces = useMemo(\r\n    () => getWordWithSpaces(playedLetters, solution),\r\n    [solution, playedLetters]\r\n  );\r\n\r\n  return (\r\n    <GameScreenWrapper>\r\n      <header>\r\n        <GameTitle />\r\n      </header>\r\n      <main>\r\n        <GameMessage />\r\n        <HangmanPage nErrors={wrongLetters.length} />\r\n        <SolutionWrapper>{wordWithSpaces}</SolutionWrapper>\r\n        <GameErrors errors={wrongLetters} />\r\n      </main>\r\n      <GameControl>\r\n        <Reset\r\n          type=\"button\"\r\n          onClick={() => {\r\n            dispatch(start());\r\n          }}\r\n        >\r\n          Reset game\r\n        </Reset>\r\n        <LanguageSelector />\r\n      </GameControl>\r\n    </GameScreenWrapper>\r\n  );\r\n};\r\n\r\nGameScreen.propTypes = {\r\n  playedLetters: PropTypes.string.isRequired,\r\n  solution: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GameScreen;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport GameScreen from \"./components/GameScreen\";\r\nimport isLetter from \"./utils/isLetter\";\r\n\r\nimport {\r\n  playLetter,\r\n  selectSolution,\r\n  selectPlayedLetters,\r\n  selectStatus,\r\n} from \"./gameSlice\";\r\nimport { GAME_STATUS } from \"./options\";\r\n\r\nexport default () => {\r\n  const solution = useSelector(selectSolution);\r\n  const playedLetters = useSelector(selectPlayedLetters);\r\n\r\n  const dispatch = useDispatch();\r\n  const status = useSelector(selectStatus);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = ({ key, ctrlKey, metaKey }) => {\r\n      // CTRL+T and CMD+T don't count!\r\n      if (metaKey || ctrlKey || status !== GAME_STATUS.PLAYING) {\r\n        return;\r\n      }\r\n\r\n      const letterCandidate = key.toLowerCase();\r\n\r\n      isLetter(letterCandidate) && dispatch(playLetter(letterCandidate));\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyDown);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [dispatch, status]);\r\n\r\n  return <GameScreen solution={solution} playedLetters={playedLetters} />;\r\n};\r\n","export default (str) => str.length === 1 && str.match(/[a-zA-Z]/i);\n","import React from \"react\";\r\nimport Game from \"./features/game/Game\";\r\n\r\nexport default function App() {\r\n  return <Game />;\r\n}\r\n","import axios from \"axios\";\nexport default class WordService {\n  async getWord() {\n    try {\n      const word = await axios.get(\n        \"https://random-word-api.herokuapp.com/word\"\n      );\n      return word.data[0];\n    } catch (e) {\n      throw new Error(`\n        Unable to get EN word:\n        -> ${e.message}\n      `);\n    }\n  }\n}\n","import axios from \"axios\";\nexport default class WordService {\n  async getWord() {\n    try {\n      const {\n        data: { word },\n      } = await axios.get(\"https://api.dicionario-aberto.net/random\");\n      return word;\n    } catch ({ message }) {\n      throw new Error(`\n        Unable to get EN word:\n        -> ${message}\n      `);\n    }\n  }\n}\n","import WordServiceEN from \"./WordServiceEN\";\nimport WordServicePT from \"./WordServicePT\";\n\nexport class WordService {\n  static defaultLang = \"en\";\n\n  static langServices = {\n    pt: new WordServicePT(),\n    en: new WordServiceEN(),\n  };\n\n  static getServiceFromLang(lang) {\n    const { langServices, defaultLang } = WordService;\n\n    return langServices[lang] || langServices[defaultLang];\n  }\n\n  async getWord(lang) {\n    try {\n      return await WordService.getServiceFromLang(lang).getWord();\n    } catch (e) {\n      throw new Error(`\n        Error getting word in ${lang} language:\n        -> ${e.message}\n      `);\n    }\n  }\n}\n","import getWordWithSpaces from \"./getWordWithSpaces\";\n\nexport default (playedLetters, solution) => {\n  return !getWordWithSpaces(playedLetters, solution).includes(\"_\");\n};\n","import getWrongLetters from \"./getWrongLetters\";\n\nexport default (playedLetters, solution) => {\n  const wrongLetters = getWrongLetters(playedLetters, solution);\n\n  return wrongLetters.length > 5;\n};\n","import { call, put, takeEvery, all, select } from \"redux-saga/effects\";\nimport i18n from \"i18next\";\n\nimport { WordService } from \"../services/WordService\";\nimport {\n  startAfterFetch,\n  start,\n  win,\n  lose,\n  setGameError,\n  playLetter,\n  selectSolution,\n  selectPlayedLetters,\n} from \"../features/game/gameSlice\";\nimport {\n  setLanguage,\n  selectLanguage,\n} from \"../features/language/languageSlice\";\nimport hasWon from \"../features/game/utils/hasWon\";\nimport hasLost from \"../features/game/utils/hasLost\";\n\nconst wordService = new WordService();\n\nfunction* fetchWord() {\n  try {\n    const language = yield select(selectLanguage);\n    const word = yield call(wordService.getWord, language);\n    yield put(startAfterFetch(word));\n  } catch (e) {\n    yield put(setGameError(e.message));\n    throw new Error(e);\n  }\n}\n\nfunction* startAfterSetLanguage() {\n  const language = yield select(selectLanguage);\n\n  yield call(() => i18n.changeLanguage(language));\n  yield put(start());\n}\n\nfunction* setLanguageOnRehydrate() {\n  const language = yield select(selectLanguage);\n\n  yield call(() => i18n.changeLanguage(language));\n}\n\nfunction* checkGameEnd() {\n  const playedLetters = yield select(selectPlayedLetters);\n  const solution = yield select(selectSolution);\n\n  if (hasWon(playedLetters, solution)) {\n    yield put(win());\n  } else if (hasLost(playedLetters, solution)) {\n    yield put(lose());\n  }\n}\n\nexport default function* gameSaga() {\n  yield all([\n    takeEvery(start().type, fetchWord),\n    takeEvery(setLanguage().type, startAfterSetLanguage),\n    takeEvery(playLetter().type, checkGameEnd),\n    takeEvery(\"persist/REHYDRATE\", setLanguageOnRehydrate),\n  ]);\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport gameReducer from \"../features/game/gameSlice\";\r\nimport languageReducer from \"../features/language/languageSlice\";\r\nimport appSaga from \"./sagas.js\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer,\r\n  language: languageReducer,\r\n});\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) => [\r\n    ...getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [\"persist/PERSIST\", \"persist/REHYDRATE\"],\r\n      },\r\n    }),\r\n    sagaMiddleware,\r\n  ],\r\n});\r\n\r\nsagaMiddleware.run(appSaga);\r\n\r\nexport default store;\r\nexport const persistor = persistStore(store);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  pt: {\n    translation: {\n      nrErrorsFigCaption: \"Tentativas: {{ chancesLeft }}\",\n      revealSolution: \"A palavra é <1>{{ solution }}</1>\",\n      \"You win!\": \"Ganhaste!\",\n      \"You lose!\": \"Perdeste!\",\n      \"Try another word. Play again!\": \"Tenta outra palavra. Joga outra vez!\",\n    },\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n    keySeparator: false, // we do not use keys in form messages.welcome\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store, { persistor } from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport i18nConfig from \"./i18nConfig\";\r\n\r\ni18n\r\n  .use(initReactI18next) // passes i18n down to react-i18next\r\n  .init(i18nConfig);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}