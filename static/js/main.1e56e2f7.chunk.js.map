{"version":3,"sources":["components/HangmanPage/page-head.png","utils/getLowerNoAccentWord.js","components/HangmanPage/HangmanPage.js","components/HangmanPage/index.js","components/Title.js","features/game/options.js","features/game/gameSlice.js","features/game/GameMessage.js","features/language/options.js","features/language/languageSlice.js","features/language/LanguageSelector.js","features/game/GameScreen.js","features/game/Game.js","utils/isLetter.js","App.js","services/WordServiceEN.js","services/WordServicePT.js","services/WordService.js","app/sagas.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","word","toLowerCase","replace","Doll","styled","div","Head","img","Torso","Limb","LeftArm","RightArm","LeftLeg","RightLeg","HangmanPage","nErrors","src","headSrc","alt","Title","text","GAME_STATUS","GAME_MESSAGES","initialState","playedLetters","solution","error","message","status","gameSlice","createSlice","name","reducers","start","state","startAfterFetch","action","payload","setGameError","playLetter","Set","sort","join","actions","selectPlayedLetters","setMessage","selectSolution","selectMessage","GameMessage","useSelector","role","LANGUAGES","EN","PT","language","languageSlice","setLanguage","selectLanguage","Select","select","dispatch","useDispatch","currentLang","defaultValue","onChange","target","value","Object","keys","map","langCode","SolutionWrapper","span","GameScreen","title","solutionWithoutAccents","useMemo","getLowerNoAccentWord","calculateErrors","reduce","totalErrors","letter","includes","wordWithSpaces","acc","char","noAccentChar","match","LanguageSelector","type","onClick","handlePlayLetter","useCallback","str","letterCandidate","key","length","useEffect","document","addEventListener","removeEventListener","App","Game","WordService","axios","get","data","Error","lang","getServiceFromLang","getWord","langServices","defaultLang","WordServicePT","WordServiceEN","fetchWord","startAfterSetLanguage","gameSaga","wordService","call","put","all","takeEvery","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","game","gameReducer","languageReducer","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","run","appSaga","persistor","persistStore","Boolean","window","location","hostname","ReactDOM","render","StrictMode","loading","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e56e2f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/page-head.1cc90bfe.png\";","/**\n * Get a version of a word with no accents or uppercase letters.\n *\n * @example getLowerNoAccentWord(\"roda\") // \"roda\"\n * @example getLowerNoAccentWord(\"Éder\") // \"eder\"\n * @example getLowerNoAccentWord(\"Extremo\") // \"extremo\"\n * @example getLowerNoAccentWord(\"êxodo\") // \"exodo\"\n * @example getLowerNoAccentWord(\"bárbara\") // \"barbara\"\n * @example getLowerNoAccentWord(\"órgãos\") // \"orgaos\"\n * @example getLowerNoAccentWord(\"à\") // \"a\"\n * @example getLowerNoAccentWord(\"perseverança\") // \"perseveranca\"\n * @example getLowerNoAccentWord(\"ídolo\") // \"idolo\"\n * @example getLowerNoAccentWord(\"miúda\") // \"miuda\"\n * @example getLowerNoAccentWord(\"lápis-lazúli\") // \"lapis-lazuli\"\n */\nexport default (word) => {\n  return word\n    .toLowerCase()\n    .replace(/é|ê/g, \"e\")\n    .replace(/í/g, \"i\")\n    .replace(/ú/g, \"u\")\n    .replace(/ó|õ|ô/g, \"o\")\n    .replace(/á|à|ã/g, \"a\")\n    .replace(/ç/g, \"c\");\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport headSrc from \"./page-head.png\";\n\nconst bodyColor = \"hotpink\";\n\nconst Doll = styled.div`\n  width: 120px;\n  padding-bottom: 35px;\n  position: relative;\n`;\n\nconst Head = styled.img`\n  width: 50%;\n  display: block;\n  margin: auto;\n`;\n\nconst Torso = styled.div`\n  width: 5px;\n  border-radius: 5px;\n  margin: 5px auto;\n  height: 90px;\n  background: ${bodyColor};\n`;\n\nconst Limb = styled.div`\n  width: 5px;\n  border-radius: 5px;\n  height: 30px;\n  background: ${bodyColor};\n  position: absolute;\n`;\n\nconst LeftArm = styled(Limb)`\n  transform: rotate(30deg);\n  top: 85px;\n  left: 35px;\n`;\n\nconst RightArm = styled(Limb)`\n  transform: rotate(-30deg);\n  top: 85px;\n  right: 35px;\n`;\n\nconst LeftLeg = styled(Limb)`\n  transform: rotate(20deg);\n  top: 155px;\n  left: 45px;\n`;\n\nconst RightLeg = styled(Limb)`\n  transform: rotate(-20deg);\n  top: 155px;\n  right: 45px;\n`;\n\nfunction HangmanPage({ nErrors = 0 }) {\n  return (\n    <Doll>\n      {nErrors > 0 && <Head src={headSrc} alt=\"\" />}\n      {nErrors > 1 && <Torso></Torso>}\n      {nErrors > 2 && <LeftArm></LeftArm>}\n      {nErrors > 3 && <RightArm></RightArm>}\n      {nErrors > 4 && <LeftLeg></LeftLeg>}\n      {nErrors > 5 && <RightLeg></RightLeg>}\n    </Doll>\n  );\n}\n\nHangmanPage.propTypes = {\n  nErrors: PropTypes.number,\n};\n\nexport default HangmanPage;\n","import HangmanPage from \"./HangmanPage\";\n\nexport default HangmanPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Title = ({ text }) => <h1>{text}</h1>;\n\nTitle.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","export const GAME_STATUS = {\n  // can start game, not ready yet. Cannot play letters\n  IDLE: \"idle\",\n  // can play letters\n  PLAYING: \"playing\",\n  // fetching content, playing animation. No interaction\n  LOADING: \"loading\",\n  // like IDLE, but counts as victory\n  WON: \"won\",\n  // like IDLE, but counts as loss\n  LOST: \"lost\",\n};\n\nexport const GAME_MESSAGES = {\n  IDLE: 'Press \"Play\" to start a new game',\n  PLAYING: \"Press a letter key. See if it matches\",\n  LOADING: \"Starting game, please wait a bit\",\n  WON: \"Congratulations, you won! Start a new game?\",\n  LOST: \"Too bad, you lost! Start a new game?\",\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { GAME_STATUS, GAME_MESSAGES } from \"./options\";\r\n\r\nconst initialState = {\r\n  playedLetters: \"\",\r\n  solution: \"\",\r\n  error: null,\r\n  message: GAME_MESSAGES.IDLE,\r\n  status: GAME_STATUS.IDLE,\r\n};\r\n\r\nexport const gameSlice = createSlice({\r\n  name: \"game\",\r\n  initialState,\r\n  reducers: {\r\n    start: (state) => {\r\n      state.playedLetters = \"\";\r\n      state.solution = \"\";\r\n      state.error = null;\r\n      state.status = GAME_STATUS.LOADING;\r\n      state.message = GAME_MESSAGES.LOADING;\r\n    },\r\n    startAfterFetch: (state, action) => {\r\n      state.solution = action.payload;\r\n      state.status = GAME_STATUS.PLAYING;\r\n      state.message = GAME_MESSAGES.PLAYING;\r\n    },\r\n    setGameError: (state, action) => {\r\n      state.error = action.payload;\r\n      state.status = GAME_STATUS.IDLE;\r\n      state.status = GAME_MESSAGES.IDLE;\r\n    },\r\n    playLetter: (state, action) => {\r\n      const { playedLetters } = state;\r\n      state.playedLetters = [...new Set(`${playedLetters}${action.payload}`)]\r\n        .sort()\r\n        .join(\"\");\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  start,\r\n  startAfterFetch,\r\n  playLetter,\r\n  setGameError,\r\n  setMessage,\r\n} = gameSlice.actions;\r\n\r\n// `useSelector((state) => state.counter.value)`\r\nexport const selectPlayedLetters = (state) => {\r\n  return state[gameSlice.name].playedLetters;\r\n};\r\nexport const selectSolution = (state) => {\r\n  return state[gameSlice.name].solution;\r\n};\r\nexport const selectStatus = (state) => {\r\n  return state[gameSlice.name].status;\r\n};\r\nexport const selectMessage = (state) => {\r\n  return state[gameSlice.name].message;\r\n};\r\nexport default gameSlice.reducer;\r\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectMessage } from \"./gameSlice\";\n\nexport default function GameMessage() {\n  const message = useSelector(selectMessage);\n\n  return <div role=\"alert\">{message}</div>;\n}\n","export const LANGUAGES = {\n  EN: \"english\",\n  PT: \"português\",\n};\n\nexport const DEFAULT_LANGUAGE = \"EN\";\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { DEFAULT_LANGUAGE } from \"./options\";\r\n\r\nconst initialState = {\r\n  language: DEFAULT_LANGUAGE,\r\n};\r\n\r\nexport const languageSlice = createSlice({\r\n  name: \"language\",\r\n  initialState,\r\n  reducers: {\r\n    setLanguage: (state, action) => {\r\n      state.language = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setLanguage } = languageSlice.actions;\r\n\r\nexport const selectLanguage = (state) => {\r\n  return state[languageSlice.name].language;\r\n};\r\n\r\nexport default languageSlice.reducer;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { selectLanguage, setLanguage } from \"./languageSlice\";\nimport { LANGUAGES } from \"./options\";\n\nconst Select = styled.select`\n  -webkit-appearance: none;\n`;\n\nexport default function () {\n  const dispatch = useDispatch();\n  const currentLang = useSelector(selectLanguage);\n\n  return (\n    <label>\n      Change language:\n      <Select\n        defaultValue={currentLang}\n        onChange={({ target }) => dispatch(setLanguage(target.value))}\n      >\n        {Object.keys(LANGUAGES).map((langCode) => (\n          <option value={langCode}>{LANGUAGES[langCode]}</option>\n        ))}\n      </Select>\n    </label>\n  );\n}\n","import React, { useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport getLowerNoAccentWord from \"../../utils/getLowerNoAccentWord\";\r\nimport HangmanPage from \"../../components/HangmanPage\";\r\nimport Title from \"../../components/Title\";\r\nimport GameMessage from \"./GameMessage\";\r\nimport LanguageSelector from \"../language/LanguageSelector\";\r\nimport { start } from \"./gameSlice\";\r\n\r\nconst SolutionWrapper = styled.span`\r\n  letter-spacing: 0.5em;\r\n`;\r\n\r\nconst GameScreen = ({ playedLetters, solution, title, message }) => {\r\n  const dispatch = useDispatch();\r\n  const solutionWithoutAccents = useMemo(() => getLowerNoAccentWord(solution), [\r\n    solution,\r\n  ]);\r\n\r\n  const calculateErrors = useMemo(\r\n    () =>\r\n      [...playedLetters].reduce((totalErrors, letter) => {\r\n        if (!solutionWithoutAccents.includes(letter)) {\r\n          totalErrors++;\r\n        }\r\n\r\n        return totalErrors;\r\n      }, 0),\r\n    [playedLetters, solutionWithoutAccents]\r\n  );\r\n\r\n  const wordWithSpaces = useMemo(\r\n    () =>\r\n      [...solution].reduce((acc, char) => {\r\n        const noAccentChar = getLowerNoAccentWord(char);\r\n        const isLetter = noAccentChar.match(/[A-Z|a-z]/i);\r\n\r\n        if (!isLetter) {\r\n          return acc + char;\r\n        }\r\n\r\n        const wasPlayed = playedLetters.includes(noAccentChar);\r\n\r\n        acc += wasPlayed ? char : \"_\";\r\n\r\n        return acc;\r\n      }, \"\"),\r\n    [solution, playedLetters]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <LanguageSelector />\r\n        <Title text={\"Hangman (Page) Game\"} />\r\n        <GameMessage />\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            dispatch(start());\r\n          }}\r\n        >\r\n          Reset\r\n        </button>\r\n      </header>\r\n      <div>\r\n        <strong>Played letters</strong> {playedLetters}\r\n      </div>\r\n      <div>\r\n        <strong>Word</strong>{\" \"}\r\n        <SolutionWrapper>{wordWithSpaces}</SolutionWrapper>\r\n      </div>\r\n      <div>\r\n        <strong>Errors</strong> {calculateErrors}\r\n      </div>\r\n\r\n      <HangmanPage nErrors={calculateErrors}></HangmanPage>\r\n    </>\r\n  );\r\n};\r\n\r\nGameScreen.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  message: PropTypes.string.isRequired,\r\n  playedLetters: PropTypes.string.isRequired,\r\n  solution: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GameScreen;\r\n","import React, { useEffect, useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport GameScreen from \"./GameScreen\";\r\nimport isLetter from \"../../utils/isLetter\";\r\n\r\nimport { playLetter, selectSolution, selectPlayedLetters } from \"./gameSlice\";\r\n\r\nexport default () => {\r\n  const solution = useSelector(selectSolution);\r\n  const playedLetters = useSelector(selectPlayedLetters);\r\n  const dispatch = useDispatch();\r\n\r\n  const handlePlayLetter = useCallback(\r\n    ({ key }) => {\r\n      const letterCandidate = key.toLowerCase();\r\n      isLetter(letterCandidate) && dispatch(playLetter(letterCandidate));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      // no solution yet. Start from scratch\r\n      document.addEventListener(\"keydown\", handlePlayLetter);\r\n    },\r\n    [dispatch, handlePlayLetter, solution],\r\n    () => {\r\n      document.removeEventListener(\"keydown\", handlePlayLetter);\r\n    }\r\n  );\r\n\r\n  return <GameScreen solution={solution} playedLetters={playedLetters} />;\r\n};\r\n","export default (str) => str.length === 1 && str.match(/[a-zA-Z]/i);\n","import React from \"react\";\r\nimport Game from \"./features/game/Game\";\r\n\r\nexport default function App() {\r\n  return <Game />;\r\n}\r\n","import axios from \"axios\";\nexport default class WordService {\n  async getWord() {\n    try {\n      const word = await axios.get(\n        \"https://random-word-api.herokuapp.com/word\"\n      );\n      return word.data[0];\n    } catch (e) {\n      throw new Error(`\n        Unable to get EN word:\n        -> ${e.message}\n      `);\n    }\n  }\n}\n","import axios from \"axios\";\nexport default class WordService {\n  async getWord() {\n    try {\n      const {\n        data: { word },\n      } = await axios.get(\"https://api.dicionario-aberto.net/random\");\n      return word;\n    } catch ({ message }) {\n      throw new Error(`\n        Unable to get EN word:\n        -> ${message}\n      `);\n    }\n  }\n}\n","import WordServiceEN from \"./WordServiceEN\";\nimport WordServicePT from \"./WordServicePT\";\n\nexport class WordService {\n  static defaultLang = \"EN\";\n\n  static langServices = {\n    PT: new WordServicePT(),\n    EN: new WordServiceEN(),\n  };\n\n  static getServiceFromLang(lang) {\n    const { langServices, defaultLang } = WordService;\n\n    return langServices[lang] || langServices[defaultLang];\n  }\n\n  async getWord(lang) {\n    try {\n      return await WordService.getServiceFromLang(lang).getWord();\n    } catch (e) {\n      throw new Error(`\n        Error getting word in ${lang} language:\n        -> ${e.message}\n      `);\n    }\n  }\n}\n","import { call, put, takeEvery, all, select } from \"redux-saga/effects\";\nimport { WordService } from \"../services/WordService\";\nimport {\n  startAfterFetch,\n  start,\n  setGameError,\n} from \"../features/game/gameSlice\";\nimport {\n  setLanguage,\n  selectLanguage,\n} from \"../features/language/languageSlice\";\n\nconst wordService = new WordService();\n\nfunction* fetchWord() {\n  try {\n    const language = yield select(selectLanguage);\n    const word = yield call(wordService.getWord, language);\n    yield put(startAfterFetch(word));\n  } catch (e) {\n    yield put(setGameError(e.message));\n    throw new Error(e);\n  }\n}\n\nfunction* startAfterSetLanguage() {\n  yield put(start());\n}\n\nexport default function* gameSaga() {\n  yield all([\n    takeEvery(start().type, fetchWord),\n    takeEvery(setLanguage().type, startAfterSetLanguage),\n  ]);\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport gameReducer from \"../features/game/gameSlice\";\r\nimport languageReducer from \"../features/language/languageSlice\";\r\nimport appSaga from \"./sagas.js\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer,\r\n  language: languageReducer,\r\n});\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) => [\r\n    ...getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [\"persist/PERSIST\", \"persist/REHYDRATE\"],\r\n      },\r\n    }),\r\n    sagaMiddleware,\r\n  ],\r\n});\r\n\r\nsagaMiddleware.run(appSaga);\r\n\r\nexport default store;\r\nexport const persistor = persistStore(store);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store, { persistor } from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}